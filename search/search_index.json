{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RenderCV","text":"<p>RenderCV is a $\\LaTeX$ CV/resume framework. It allows you to create a high-quality CV as a PDF from a YAML file with full Markdown syntax support and complete control over the $\\LaTeX$ code.</p> <p>The primary motivation behind the RenderCV is to provide people with a concrete framework that will allow</p> <ul> <li>Version controlling a CV's content and design separately in an organized manner.</li> <li>Building an automated pipeline that can generate the CV as PDF, markdown, and PNG files.</li> <li>Making the CV's design uniform and nicely structured without room for human errors.</li> </ul> <p>RenderCV offers built-in $\\LaTeX$ and Markdown templates ready to produce high-quality CVs. However, the templates are entirely arbitrary and can easily be updated to leverage RenderCV's capabilities with your custom CV themes.</p> <p>RenderCV takes a YAML file that looks like this:</p> <pre><code>cv:\n  name: John Doe\n  location: Your Location\n  email: youremail@yourdomain.com\n  sections:\n    this_is_a_section_title:\n      - This is a type of entry, TextEntry\u2014just a plain string.\n      - You can have as many entries as you want under a section.\n      - RenderCV offers a variety of entry types, such as TextEntry,\n        BulletEntry, EducationEntry, ExperienceEntry, NormalEntry,\n        OneLineEntry, PublicationEntry.\n      - Each entry type has its own set of attributes and different\n        looks.\n    my_education_section:\n      - institution: Bo\u011fazi\u00e7i University\n        area: Mechanical Engineering\n        degree: BS\n        start_date: 2000-09\n        end_date: 2005-05\n        highlights:\n          - 'GPA: 3.9/4.0 ([Transcript](https://example.com))'\n          - '**Coursework:** Structural Analysis, Thermodynamics,\n            Heat Transfer'\n    experience:\n      ...\n</code></pre> <p>Then, it produces one of these PDFs with its corresponding $\\LaTeX$ code, markdown file, and images as PNGs. Each of these is an example of one of four built-in themes of RenderCV. Click on images to preview PDFs.</p> <p>It also generates an HTML file so all the content can be pasted into Grammarly or any word processor for spelling and grammar checking.</p> <p></p> <p>It also validates the input file, and if there are any problems, it tells users where the problems are and how they can fix them.</p> <p></p> <p>RenderCV comes with a JSON Schema so that the input YAML file can be filled out interactively.</p> <p></p>"},{"location":"#quick-start-guide","title":"Quick Start Guide","text":"<p>Either use rendercv-pipeline or follow the steps below.</p> <p>RenderCV doesn't require a $\\LaTeX$ installation; it comes with it!</p> <ol> <li>Install\u00a0Python\u00a0(3.10 or newer).</li> <li>Run the command below in a terminal to install RenderCV.     <pre><code>pip install rendercv\n</code></pre></li> <li>Run the command below to generate a starting input files.     <pre><code>rendercv new \"Full Name\"\n</code></pre></li> <li>Edit the contents of\u00a0<code>Full_Name_CV.yaml</code>\u00a0in your favorite editor (tip: use an editor that supports JSON Schemas). The templates can be modified as well.</li> <li>Run the command below to generate your\u00a0CV.     <pre><code>rendercv render Full_Name_CV.yaml\n</code></pre></li> </ol> <p>Here, you can find a comprehensive user guide that covers the data model (YAML structure) and command-line interface (CLI) in greater detail.</p>"},{"location":"#motivation","title":"Motivation","text":"<p>Writing the content of a CV and designing a CV are separate issues that should be treated separately. RenderCV attempts to provide this separation. This approach encourages users to concentrate on the content without getting distracted by the appearance of their CV and vice versa.</p> <p>RenderCV also provides a general set of utilities that will automate most of the manual work involved in the CV updating process. After updating a single sentence or a date in the YAML input file written in pure English, RenderCV will</p> <ul> <li>re-create your $\\LaTeX$ file.</li> <li>render a new PDF file.</li> <li>create a new Markdown file.</li> <li>create a new HTML document to be pasted into word processors for spelling and grammar checking.</li> <li>create PNG files for each page.</li> </ul> <p>Why should I bother using RenderCV instead of $\\LaTeX$? I can version-control $\\LaTeX$ code too!</p> <p>RenderCV is not a replacement for $\\LaTeX$, but it's a general set of utilities designed to create and manage $\\LaTeX$ CVs. If you're currently using $\\LaTeX$ to create your CV, you should try RenderCV. Using your existing $\\LaTeX$ themes in RenderCV is very easy.</p> <p>Here are some advantages of RenderCV over using pure $\\LaTeX$:</p> <ul> <li>RenderCV will separate the content of your CV from your $\\LaTeX$ code. They will sit in independent files, and RenderCV will use both to generate your CV.</li> <li>You will be able to version-control your design and content separately.</li> <li>Updating your content in a YAML file is easier than updating a complex $\\LaTeX$ file.</li> <li>A pure $\\LaTeX$ CV will have many code duplications because a CV is a document with a list of sections that contain a list of entries. RenderCV has only one $\\LaTeX$ code for each entry type, duplicated automatically based on the YAML input file.</li> <li>Spell-checking is not very straightforward in $\\LaTeX$ documents.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>The source code of RenderCV is well-commented and documented. Reading the source code might be fun as the software structure is explained with docstrings and comments.</p> <p>The detailed user guide can be found\u00a0here.</p> <p>The developer guide can be found here.</p> <p>Reference to the code can be found\u00a0here.</p> <p>The changelog can be found\u00a0here.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>All contributions to RenderCV are welcome! For development, you will need to clone the repository recursively, as TinyTeX is being used as a submodule:</p> <pre><code>git clone --recursive https://github.com/sinaatalay/rendercv.git\n</code></pre> <p>All code and development tool specifications are in\u00a0<code>pyproject.toml</code>. Also, don't forget to read the developer guide.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog.</p> <p>Click here to see the unreleased changes.</p>"},{"location":"changelog/#110-2024-05-25","title":"1.10 - 2024-05-25","text":"<p>Full Changelog: v1.9...v1.10</p>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li><code>rendercv --version</code> command has been added to show the version of RenderCV.</li> <li><code>StackOverflow</code> (#77), <code>GitLab</code> (#78), <code>ResearchGate</code>, and <code>YouTube</code> has been added to the available social network types.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Authors in <code>PublicationEntry</code> are now displayed correctly in <code>engineeringresumes</code> and <code>sb2nov</code> themes.</li> <li><code>justify-with-no-hyphenation</code> text alignment has been fixed.</li> </ul>"},{"location":"changelog/#19-2024-05-19","title":"1.9 - 2024-05-19","text":"<p>Full Changelog: v1.8...v1.9</p>"},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>RenderCV is now a multilingual tool. English strings can be overridden with <code>locale_catalog</code> section in the YAML input file (#26, #20). See the documentation for more information.</li> <li>PNG files for each page can be generated now (#57).</li> <li><code>rendercv new</code> command now generates Markdown and LaTeX source files in addition to the YAML input file so that the default templates can be modified easily.</li> <li>A new CLI command has been added, <code>rendercv create-theme</code>, to allow users to create their own themes easily.     <pre><code>rendercv create-theme \"customtheme\" --based-on \"classic\"\n</code></pre></li> <li>A developer guide has been written.</li> <li>New options have been added to the <code>rendercv render</code> command: <ul> <li><code>--output-folder-name \"OUTPUT_FOLDER_NAME\"</code>: Generates the output files in a folder with the given name. By default, the output folder name is <code>rendercv_output</code>. The output folder will be created in the current working directory. (#58)</li> <li><code>--latex-path LATEX_PATH</code>: Copies the generated $\\LaTeX$ source code from the output folder and pastes it to the specified path.</li> <li><code>--pdf-path PDF_PATH</code>: Copies the generated PDF file from the output folder and pastes it to the specified path.</li> <li><code>--markdown-path MARKDOWN_PATH</code>: Copies the generated Markdown file from the output folder and pastes it to the specified path.</li> <li><code>--html-path HTML_PATH</code>: Copies the generated HTML file from the output folder and pastes it to the specified path.</li> <li><code>--png-path PNG_PATH</code>: Copies the generated PNG files from the output folder and pastes them to the specified path.</li> <li><code>--dont-generate-markdown</code>: Prevents the generation of the Markdown file.</li> <li><code>--dont-generate-html</code>: Prevents the generation of the HTML file.</li> <li><code>--dont-generate-png</code>: Prevents the generation of the PNG files.</li> <li><code>--ANY.LOCATION.IN.THE.YAML.FILE \"VALUE\"</code>: Overrides the value of <code>ANY.LOCATION.IN.THE.YAML.FILE</code> with <code>VALUE</code>. This option can be used to avoid storing sensitive information in the YAML file. Sensitive information, like phone numbers, can be passed as a command-line argument with environment variables. This method is also beneficial for creating multiple CVs using the same YAML file by changing only a few values.</li> </ul> </li> <li>New options have been added to the <code>rendercv new</code> command: <ul> <li><code>--dont-create-theme-source-files</code>: Prevents the creation of the theme source files. By default, the theme source files are created.</li> <li><code>--dont-create-markdown-source-files</code>: Prevents the creation of the Markdown source files. By default, the Markdown source files are created.</li> </ul> </li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Package size has been reduced by removing unnecessary TinyTeX files.</li> <li><code>date</code> field is now optional in <code>PublicationEntry</code>.</li> <li>README.md and the documentation have been rewritten.</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li><code>ExperienceEntry</code> and <code>NormalEntry</code> without location and dates have been fixed in the <code>engineeringresumes</code>, <code>classic</code>, and <code>sb2nov</code> themes.</li> <li>LaTeX templates have been polished.</li> <li>Bugs related to the special characters in email addresses have been fixed (#64).</li> </ul>"},{"location":"changelog/#18-2024-04-16","title":"1.8 - 2024-04-16","text":"<p>Full Changelog: v1.7...v1.8</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Horizontal space has been added between entry titles and dates in the <code>engineeringresumes</code> theme.</li> <li>The <code>date_and_location_width</code> option has been added to the <code>engineeringresumes</code> theme.</li> <li>A new design option, <code>disable_external_link_icons</code>, has been added.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li><code>sb2nov</code> theme's $\\LaTeX$ code has been changed completly. There are slight changes in the looks.</li> <li><code>classic</code>, <code>sb2nov</code>, and <code>engineeringresumes</code> use the same $\\LaTeX$ code base now.</li> <li>The design option <code>show_last_updated_date</code> has been renamed to <code>disable_last_updated_date</code> for consistency.</li> <li>Mastodon links now use the original hostnames instead of <code>https://mastodon.social/</code>.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>The location is now shown in the header (#54).</li> <li>The <code>education_degree_width</code> option of the <code>classic</code> theme has been fixed.</li> <li>Lualatex and xelatex rendering problems have been fixed (#52).</li> </ul>"},{"location":"changelog/#17-2024-04-08","title":"1.7 - 2024-04-08","text":"<p>Full Changelog: v1.6...v1.7</p>"},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>The new theme, <code>engineeringresumes</code>, is ready to be used now.</li> <li>The <code>education_degree_width</code> design option has been added for the <code>classic</code> theme.</li> <li><code>last_updated_date_style</code> design option has been added for all the themes except <code>moderncv</code>.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Highlights can now be broken into multiple pages in the <code>classic</code> theme (#47).</li> <li>Some JSON Schema bugs have been fixed.</li> </ul>"},{"location":"changelog/#16-2024-03-31","title":"1.6 - 2024-03-31","text":"<p>Full Changelog: v1.5...v1.6</p>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>A new theme has been added: <code>engineeringresumes</code>. It hasn't been tested fully yet.</li> <li>A new text alignment option has been added to <code>classic</code> and <code>sb2nov</code>: <code>justified-with-no-hyphenation</code> (#34)</li> <li>Users are now allowed to run local <code>lualatex</code>, <code>xelatex</code>, <code>latexmk</code> commands in addition to <code>pdflatex</code> (#48).</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Orcid is now displayed in the header like other social media links.</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Decoding issues have been fixed (#29).</li> <li>Classic theme's <code>ExperienceEntry</code> has been fixed (#49).</li> </ul>"},{"location":"changelog/#15-2024-03-27","title":"1.5 - 2024-03-27","text":"<p>Full Changelog: v1.4...v1.5</p>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Users can now make bold or italic texts normal with Markdown syntax.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>The <code>moderncv</code> theme doesn't italicize any text by default now.</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>The <code>moderncv</code> theme's PDF title issue has been fixed.</li> <li>The ordering of the data models' keys in JSON Schema has been fixed.</li> <li>The unhandled exception when a custom theme's <code>__init__.py</code> file is invalid has been fixed.</li> <li>The <code>sb2nov</code> theme's <code>PublicationEntry</code> without <code>journal</code> and <code>doi</code> fields is now rendered correctly.</li> <li>The <code>sb2nov</code> theme's <code>OneLineEntry</code>'s colon issue has been fixed.</li> </ul>"},{"location":"changelog/#14-2024-03-10","title":"1.4 - 2024-03-10","text":"<p>Full Changelog: v1.3...v1.4</p>"},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>A new entry type has been added: <code>BulletEntry</code></li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li><code>OneLineEntry</code>'s <code>name</code> field has been changed to <code>label</code>. This was required to generalize the entry validations.</li> <li><code>moderncv</code>'s highlights are now bullet points.</li> <li><code>moderncv</code>'s <code>TextEntries</code> don't have bullet points anymore.</li> <li><code>sb2nov</code>'s <code>TextEntries</code> don't have bullet points anymore.</li> </ul>"},{"location":"changelog/#13-2024-03-09","title":"1.3 - 2024-03-09","text":"<p>Full Changelog: v1.2...v1.3</p>"},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>CLI documentation has been added to the user guide.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Future dates are now allowed.</li> <li>Authors' first names are no longer abbreviated in <code>PublicationEntry</code>.</li> <li>Markdown is now supported in the <code>authors</code> field of <code>PublicationEntry</code>.</li> <li><code>doi</code> field is now optional for <code>PublicationEntry</code>.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>The <code>journal</code> is now displayed in the <code>PublicationEntry</code> of the <code>sb2nov</code> theme.</li> </ul>"},{"location":"changelog/#12-2024-02-27","title":"1.2 - 2024-02-27","text":"<p>Full Changelog: v1.1...v1.2</p>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Markdown <code>TextEntry</code>, where all the paragraphs were concatenated into a single paragraph, has been fixed.</li> <li>Markdown <code>OneLineEntry</code>, where all the one-line entries were concatenated into a single line, has been fixed.</li> <li>The <code>classic</code> theme's <code>PublicationEntry</code>, where blank parentheses were rendered when the <code>journal</code> field was not provided, has been fixed.</li> <li>A bug, where an email with special characters caused a LaTeX error, has been fixed.</li> <li>Unicode error, when <code>rendercv new</code> is called with a name with special characters, has been fixed.</li> </ul>"},{"location":"changelog/#11-2024-02-25","title":"1.1 - 2024-02-25","text":"<p>Full Changelog: v0.10...v1.1</p>"},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>RenderCV is now a $\\LaTeX$ CV framework. Users can move their $\\LaTeX$ CV themes to RenderCV to produce their CV from RenderCV's YAML input.</li> <li>RenderCV now generates Markdown and HTML versions of the CV to allow users to paste the content of the CV to another software (like Grammarly) for spell checking.</li> <li>A new theme has been added: <code>moderncv</code>.</li> <li>A new theme has been added: <code>sb2nov</code>.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>The data model has been changed to be more flexible. All the sections are now under the <code>sections</code> field. All the keys are arbitrary and rendered as section titles. The entry types can be any of the six built-in entry types, and they will be detected by RenderCV for each section.</li> <li>The templating system has been changed completely.</li> <li>The command-line interface (CLI) has been improved.</li> <li>The validation error messages have been improved.</li> <li>TinyTeX has been moved to another repository, and it is being pulled as a Git submodule. It is still pushed to PyPI, but it's not a part of the repository anymore.</li> <li>Tests have been improved, and it uses <code>pytest</code> instead of <code>unittest</code>.</li> <li>The documentation has been rewritten.</li> <li>The reference has been rewritten.</li> <li>The build system has been changed from <code>setuptools</code> to <code>hatchling</code>.</li> </ul>"},{"location":"changelog/#010-2023-11-29","title":"0.10 - 2023-11-29","text":"<p>Full Changelog: v0.9...v0.10</p>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Author highlighting issue has been fixed in <code>PublicationEntry</code>.</li> </ul>"},{"location":"changelog/#09-2023-11-29","title":"0.9 - 2023-11-29","text":"<p>Full Changelog: v0.8...v0.9</p>"},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Page numbering has been added.</li> <li>Text alignment options have been added (left-aligned or justified).</li> <li>Header options have been added (margins and header font size).</li> <li><code>university_projects</code> field has been added.</li> </ul>"},{"location":"changelog/#08-2023-11-17","title":"0.8 - 2023-11-17","text":"<p>Full Changelog: v0.7...v0.8</p>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>YYYY date issue has been solved (#5).</li> </ul>"},{"location":"changelog/#07-2023-11-03","title":"0.7 - 2023-11-03","text":"<p>Full Changelog: v0.6...v0.7</p>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>The date type has been improved. It supports <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, and <code>YYYY</code> formats now.</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Custom sections' error messages have been fixed.</li> </ul>"},{"location":"changelog/#06-2023-10-28","title":"0.6 - 2023-10-28","text":"<p>Full Changelog: v0.5...v0.6</p>"},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li>New fields have been added: <code>experience</code>, <code>projects</code>, <code>awards</code>, <code>interests</code>, and <code>programming_skills</code>.</li> </ul>"},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>DOI validation bug has been fixed by @LabAsim in #3/</li> </ul>"},{"location":"changelog/#05-2023-10-27","title":"0.5 - 2023-10-27","text":"<p>Full Changelog: v0.4...v0.5</p>"},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li>Orcid support has been added.</li> </ul>"},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Special $\\LaTeX$ characters' escaping has been fixed.</li> </ul>"},{"location":"changelog/#04-2023-10-22","title":"0.4 - 2023-10-22","text":"<p>Full Changelog: v0.3...v0.4</p>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>CLI has been improved for more intuitive validation error messages.</li> </ul>"},{"location":"changelog/#03-2023-10-20","title":"0.3 - 2023-10-20","text":"<p>Full Changelog: v0.2...v0.3</p>"},{"location":"changelog/#fixed_13","title":"Fixed","text":"<ul> <li>The colors of CLI output have been fixed.</li> <li>Encoding problems have been fixed.</li> </ul>"},{"location":"changelog/#02-2023-10-17","title":"0.2 - 2023-10-17","text":"<p>Full Changelog: v0.1...v0.2</p>"},{"location":"changelog/#fixed_14","title":"Fixed","text":"<ul> <li>MacOS compatibility issues have been fixed.</li> </ul>"},{"location":"changelog/#01-2023-10-15","title":"0.1 - 2023-10-15","text":"<p>The first release of RenderCV.</p>"},{"location":"developer_guide/","title":"Developer Guide","text":"<p>This document provides everything you need to know about the development of RenderCV.</p>"},{"location":"developer_guide/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Ensure that you have Python version 3.10 or higher.</p> </li> <li> <p>Then, clone the repository recursively (because TinyTeX is being used as a submodule) with the following command. <pre><code>git clone --recursive https://github.com/sinaatalay/rendercv.git\n</code></pre></p> </li> <li> <p>Go to the <code>rendercv</code> directory. <pre><code>cd rendercv\n</code></pre></p> </li> <li> <p>Create a virtual environment. <pre><code>python -m venv .venv\n</code></pre></p> </li> <li> <p>Activate the virtual environment.</p> Windows (PowerShell)MacOS/Linux <pre><code>.venv\\Scripts\\Activate.ps1\n</code></pre> <pre><code>source .venv/bin/activate\n</code></pre> </li> <li> <p>Install the dependencies. <pre><code>pip install --editable .[docs,tests,dev]\n</code></pre></p> </li> </ol>"},{"location":"developer_guide/#how-rendercv-works","title":"How RenderCV works?","text":"<p>The flowchart below illustrates the general operations of RenderCV. A detailed documentation of the source code is available in the reference.</p> <pre><code>flowchart TD\n    A[YAML Input File] --parsing with ruamel.yaml package--&gt; B(Python Dictionary)\n    B --validation with pydantic package--&gt; C((Pydantic Object))\n    C --&gt; D[LaTeX File]\n    C --&gt; E[Markdown File]\n    E --markdown package--&gt; K[HTML FIle]\n    D --TinyTeX--&gt; L[PDF File]\n    L --PyMuPDF package--&gt; Z[PNG Files]\n    AA[(Jinja2 Templates)] --&gt; D\n    AA[(Jinja2 Templates)] --&gt; E</code></pre>"},{"location":"developer_guide/#writing-documentation","title":"Writing Documentation","text":"<p>The documentation's source files are located in the <code>docs</code> directory and it is built using the <code>mkdocs</code> package. To work on the documentation and see the changes in real-time, run the following command.</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"developer_guide/#updating-the-examples-and-the-json-schema","title":"Updating the examples and the JSON Schema","text":"<p>The example entry images found in the Structure of the YAML input file, the <code>examples</code> folder, and the JSON Schema <code>schema.json</code> are generated using the script <code>docs/update_rendercv_files.py</code>. To update these files, run\u00a0<code>update_rendercv_files.py</code>\u00a0with the following command.</p> <pre><code>python docs/update_rendercv_files.py\n</code></pre>"},{"location":"developer_guide/#testing","title":"Testing","text":"<p>After updating the code, all tests should pass. To run the tests, use the following command.</p> <pre><code>pytest\n</code></pre>"},{"location":"developer_guide/#a-note-about-testdata-folder","title":"A note about <code>testdata</code> folder","text":"<p>In some of the tests:</p> <ul> <li>RenderCV generates an output with a sample input.</li> <li>Then, the output is compared with a reference output, which has been manually generated and stored in <code>testdata</code>. If the files differ, the tests fail.</li> </ul> <p>When the <code>testdata</code> folder needs to be updated, it can be manually regenerated by setting <code>update_testdata</code> to <code>True</code> in <code>conftest.py</code> and running the tests.</p> <p>Whenever the <code>testdata</code> folder is generated, the files should be reviewed manually to ensure everything works as expected.</p>"},{"location":"reference/","title":"RenderCV","text":"<p>RenderCV package.</p> <p>RenderCV is a $\\LaTeX$ CV/resume framework that generates a CV from a JSON/YAML input file. Its primary motivation is to allow the separation between a CV's content and design.</p> <p>In this section, you can find how RenderCV's components are structured and how they interact with each other.</p> <ul> <li>cli.py \u2013 This module contains all the command-line interface (CLI) related code for RenderCV.</li> <li>data_models.py \u2013 This module contains classes and functions to parse and validate RenderCV's input YAML.</li> <li>renderer.py \u2013 This module implements $\\LaTeX$ file generation and $\\LaTeX$ runner utilities for RenderCV.</li> <li>themes \u2013 This package contains all the built-in themes of RenderCV.<ul> <li>classic</li> <li>engineeringresumes</li> <li>sb2nov</li> <li>moderncv</li> </ul> </li> </ul>"},{"location":"reference/cli/","title":"CLI","text":"<p>This module contains the functions and classes that handle the command line interface (CLI) of RenderCV. It uses Typer to create the CLI and Rich to provide a nice looking terminal output.</p>"},{"location":"reference/cli/#rendercv.cli.LiveProgressReporter","title":"<code>LiveProgressReporter(number_of_steps, end_message='Your CV is rendered!')</code>","text":"<p>               Bases: <code>Live</code></p> <p>This class is a wrapper around <code>rich.live.Live</code> that provides the live progress reporting functionality.</p> <p>Parameters:</p> <ul> <li> <code>number_of_steps</code>               (<code>int</code>)           \u2013            <p>The number of steps to be finished.</p> </li> </ul> Source code in <code>rendercv/cli.py</code> <pre><code>def __init__(self, number_of_steps: int, end_message: str = \"Your CV is rendered!\"):\n    class TimeElapsedColumn(rich.progress.ProgressColumn):\n        def render(self, task: \"rich.progress.Task\") -&gt; rich.text.Text:\n            elapsed = task.finished_time if task.finished else task.elapsed\n            delta = f\"{elapsed:.1f} s\"\n            return rich.text.Text(str(delta), style=\"progress.elapsed\")\n\n    self.step_progress = rich.progress.Progress(\n        TimeElapsedColumn(), rich.progress.TextColumn(\"{task.description}\")\n    )\n\n    self.overall_progress = rich.progress.Progress(\n        TimeElapsedColumn(),\n        rich.progress.BarColumn(),\n        rich.progress.TextColumn(\"{task.description}\"),\n    )\n\n    self.group = rich.console.Group(\n        rich.panel.Panel(rich.console.Group(self.step_progress)),\n        self.overall_progress,\n    )\n\n    self.overall_task_id = self.overall_progress.add_task(\"\", total=number_of_steps)\n    self.number_of_steps = number_of_steps\n    self.end_message = end_message\n    self.current_step = 0\n    self.overall_progress.update(\n        self.overall_task_id,\n        description=(\n            f\"[bold #AAAAAA]({self.current_step} out of\"\n            f\" {self.number_of_steps} steps finished)\"\n        ),\n    )\n    super().__init__(self.group)\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.LiveProgressReporter.__enter__","title":"<code>__enter__()</code>","text":"<p>Overwrite the <code>__enter__</code> method for the correct return type.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def __enter__(self) -&gt; \"LiveProgressReporter\":\n    \"\"\"Overwrite the `__enter__` method for the correct return type.\"\"\"\n    self.start(refresh=self._renderable is not None)\n    return self\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.LiveProgressReporter.start_a_step","title":"<code>start_a_step(step_name)</code>","text":"<p>Start a step and update the progress bars.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def start_a_step(self, step_name: str):\n    \"\"\"Start a step and update the progress bars.\"\"\"\n    self.current_step_name = step_name\n    self.current_step_id = self.step_progress.add_task(\n        f\"{self.current_step_name} has started.\"\n    )\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.LiveProgressReporter.finish_the_current_step","title":"<code>finish_the_current_step()</code>","text":"<p>Finish the current step and update the progress bars.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def finish_the_current_step(self):\n    \"\"\"Finish the current step and update the progress bars.\"\"\"\n    self.step_progress.stop_task(self.current_step_id)\n    self.step_progress.update(\n        self.current_step_id, description=f\"{self.current_step_name} has finished.\"\n    )\n    self.current_step += 1\n    self.overall_progress.update(\n        self.overall_task_id,\n        description=(\n            f\"[bold #AAAAAA]({self.current_step} out of\"\n            f\" {self.number_of_steps} steps finished)\"\n        ),\n        advance=1,\n    )\n    if self.current_step == self.number_of_steps:\n        self.end()\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.LiveProgressReporter.end","title":"<code>end()</code>","text":"<p>End the live progress reporting.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def end(self):\n    \"\"\"End the live progress reporting.\"\"\"\n    self.overall_progress.update(\n        self.overall_task_id,\n        description=f\"[bold green]{self.end_message}\",\n    )\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.welcome","title":"<code>welcome()</code>","text":"<p>Print a welcome message to the terminal.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def welcome():\n    \"\"\"Print a welcome message to the terminal.\"\"\"\n    table = rich.table.Table(\n        title=(\n            \"\\nWelcome to [bold]Render[dodger_blue3]CV[/dodger_blue3][/bold]! Some\"\n            \" useful links:\"\n        ),\n        title_justify=\"left\",\n    )\n\n    table.add_column(\"Title\", style=\"magenta\", justify=\"left\")\n    table.add_column(\"Link\", style=\"cyan\", justify=\"right\", no_wrap=True)\n\n    table.add_row(\"Documentation\", \"https://docs.rendercv.com\")\n    table.add_row(\"Source code\", \"https://github.com/sinaatalay/rendercv/\")\n    table.add_row(\"Bug reports\", \"https://github.com/sinaatalay/rendercv/issues/\")\n    table.add_row(\"Feature requests\", \"https://github.com/sinaatalay/rendercv/issues/\")\n    table.add_row(\"Discussions\", \"https://github.com/sinaatalay/rendercv/discussions/\")\n    table.add_row(\n        \"RenderCV Pipeline\", \"https://github.com/sinaatalay/rendercv-pipeline/\"\n    )\n\n    print(table)\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.warning","title":"<code>warning(text)</code>","text":"<p>Print a warning message to the terminal.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text of the warning message.</p> </li> </ul> Source code in <code>rendercv/cli.py</code> <pre><code>def warning(text: str):\n    \"\"\"Print a warning message to the terminal.\n\n    Args:\n        text (str): The text of the warning message.\n    \"\"\"\n    print(f\"[bold yellow]{text}\")\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.error","title":"<code>error(text=None, exception=None)</code>","text":"<p>Print an error message to the terminal and exit the program. If an exception is given, then print the exception's message as well. If neither text nor exception is given, then print an empty line and exit the program.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The text of the error message.</p> </li> <li> <code>exception</code>               (<code>Exception</code>, default:                   <code>None</code> )           \u2013            <p>An exception object. Defaults to None.</p> </li> </ul> Source code in <code>rendercv/cli.py</code> <pre><code>def error(text: Optional[str] = None, exception: Optional[Exception] = None):\n    \"\"\"Print an error message to the terminal and exit the program. If an exception is\n    given, then print the exception's message as well. If neither text nor exception is\n    given, then print an empty line and exit the program.\n\n    Args:\n        text (str): The text of the error message.\n        exception (Exception, optional): An exception object. Defaults to None.\n    \"\"\"\n    if exception is not None:\n        exception_messages = [str(arg) for arg in exception.args]\n        exception_message = \"\\n\\n\".join(exception_messages)\n        if text is None:\n            text = \"An error occurred:\"\n\n        print(\n            f\"\\n[bold red]{text}[/bold red]\\n\\n[orange4]{exception_message}[/orange4]\\n\"\n        )\n    elif text is not None:\n        print(f\"\\n[bold red]{text}\\n\")\n    else:\n        print()\n\n    raise typer.Exit(code=4)\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.information","title":"<code>information(text)</code>","text":"<p>Print an information message to the terminal.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text of the information message.</p> </li> </ul> Source code in <code>rendercv/cli.py</code> <pre><code>def information(text: str):\n    \"\"\"Print an information message to the terminal.\n\n    Args:\n        text (str): The text of the information message.\n    \"\"\"\n    print(f\"[bold green]{text}\")\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.get_error_message_and_location_and_value_from_a_custom_error","title":"<code>get_error_message_and_location_and_value_from_a_custom_error(error_string)</code>","text":"<p>Look at a string and figure out if it's a custom error message that has been sent from <code>data_models.py</code>. If it is, then return the custom message, location, and the input value.</p> <p>This is done because sometimes we raise an error about a specific field in the model validation level, but Pydantic doesn't give us the exact location of the error because it's a model-level error. So, we raise a custom error with three string arguments: message, location, and input value. Those arguments then combined into a string by Python. This function is used to parse that custom error message and return the three values.</p> <p>Parameters:</p> <ul> <li> <code>error_string</code>               (<code>str</code>)           \u2013            <p>The error message.</p> </li> </ul> <p>Returns:     tuple[Optional[str], Optional[str], Optional[str]]: The custom message,         location, and the input value.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def get_error_message_and_location_and_value_from_a_custom_error(\n    error_string: str,\n) -&gt; tuple[Optional[str], Optional[str], Optional[str]]:\n    \"\"\"Look at a string and figure out if it's a custom error message that has been\n    sent from [`data_models.py`](data_models.md). If it is, then return the custom\n    message, location, and the input value.\n\n    This is done because sometimes we raise an error about a specific field in the model\n    validation level, but Pydantic doesn't give us the exact location of the error\n    because it's a model-level error. So, we raise a custom error with three string\n    arguments: message, location, and input value. Those arguments then combined into a\n    string by Python. This function is used to parse that custom error message and\n    return the three values.\n\n    Args:\n        error_string (str): The error message.\n    Returns:\n        tuple[Optional[str], Optional[str], Optional[str]]: The custom message,\n            location, and the input value.\n    \"\"\"\n    pattern = r\"\"\"\\(['\"](.*)['\"], '(.*)', '(.*)'\\)\"\"\"\n    match = re.search(pattern, error_string)\n    if match:\n        return match.group(1), match.group(2), match.group(3)\n    else:\n        return None, None, None\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.handle_validation_error","title":"<code>handle_validation_error(exception)</code>","text":"<p>Take a Pydantic validation error and print the error messages in a nice table.</p> <p>Pydantic's <code>ValidationError</code> object is a complex object that contains a lot of information about the error. This function takes a <code>ValidationError</code> object and extracts the error messages, locations, and the input values. Then, it prints them in a nice table with Rich.</p> <p>Parameters:</p> <ul> <li> <code>exception</code>               (<code>ValidationError</code>)           \u2013            <p>The Pydantic validation error object.</p> </li> </ul> Source code in <code>rendercv/cli.py</code> <pre><code>def handle_validation_error(exception: pydantic.ValidationError):\n    \"\"\"Take a Pydantic validation error and print the error messages in a nice table.\n\n    Pydantic's `ValidationError` object is a complex object that contains a lot of\n    information about the error. This function takes a `ValidationError` object and\n    extracts the error messages, locations, and the input values. Then, it prints them\n    in a nice table with [Rich](https://rich.readthedocs.io/en/latest/).\n\n    Args:\n        exception (pydantic.ValidationError): The Pydantic validation error object.\n    \"\"\"\n    # This dictionary is used to convert the error messages that Pydantic returns to\n    # more user-friendly messages.\n    error_dictionary: dict[str, str] = {\n        \"Input should be 'present'\": (\n            \"This is not a valid date! Please use either YYYY-MM-DD, YYYY-MM, or YYYY\"\n            ' format or \"present\"!'\n        ),\n        \"Input should be a valid integer, unable to parse string as an integer\": (\n            \"This is not a valid date! Please use either YYYY-MM-DD, YYYY-MM, or YYYY\"\n            \" format!\"\n        ),\n        \"String should match pattern '\\\\d{4}-\\\\d{2}(-\\\\d{2})?'\": (\n            \"This is not a valid date! Please use either YYYY-MM-DD, YYYY-MM, or YYYY\"\n            \" format!\"\n        ),\n        \"URL scheme should be 'http' or 'https'\": \"This is not a valid URL!\",\n        \"Field required\": \"This field is required!\",\n        \"value is not a valid phone number\": \"This is not a valid phone number!\",\n        \"month must be in 1..12\": \"The month must be between 1 and 12!\",\n        \"day is out of range for month\": \"The day is out of range for the month!\",\n        \"Extra inputs are not permitted\": (\n            \"This field is unknown for this object! Please remove it.\"\n        ),\n        \"Input should be a valid string\": \"This field should be a string!\",\n        \"Input should be a valid list\": (\n            \"This field should contain a list of items but it doesn't!\"\n        ),\n    }\n\n    unwanted_texts = [\"value is not a valid email address: \", \"Value error, \"]\n\n    # Check if this is a section error. If it is, we need to handle it differently.\n    # This is needed because how dm.validate_section_input function raises an exception.\n    # This is done to tell the user which which EntryType RenderCV excepts to see.\n    errors = exception.errors()\n    for error_object in errors.copy():\n        if (\n            \"There are problems with the entries.\" in error_object[\"msg\"]\n            and \"ctx\" in error_object\n        ):\n            location = error_object[\"loc\"]\n            ctx_object = error_object[\"ctx\"]\n            if \"error\" in ctx_object:\n                error_object = ctx_object[\"error\"]\n                if hasattr(error_object, \"__cause__\"):\n                    cause_object = error_object.__cause__\n                    cause_object_errors = cause_object.errors()\n                    for cause_error_object in cause_object_errors:\n                        # we use [1:] to avoid `entries` location. It is a location for\n                        # RenderCV's own data model, not the user's data model.\n                        cause_error_object[\"loc\"] = tuple(\n                            list(location) + list(cause_error_object[\"loc\"][1:])\n                        )\n                    errors.extend(cause_object_errors)\n\n    # some locations are not really the locations in the input file, but some\n    # information about the model coming from Pydantic. We need to remove them.\n    # (e.g. avoid stuff like .end_date.literal['present'])\n    unwanted_locations = [\"tagged-union\", \"list\", \"literal\", \"int\", \"constrained-str\"]\n    for error_object in errors:\n        location = error_object[\"loc\"]\n        new_location = [str(location_element) for location_element in location]\n        for location_element in location:\n            location_element = str(location_element)\n            for unwanted_location in unwanted_locations:\n                if unwanted_location in location_element:\n                    new_location.remove(location_element)\n        error_object[\"loc\"] = new_location  # type: ignore\n\n    # Parse all the errors and create a new list of errors.\n    new_errors: list[dict[str, str]] = []\n    end_date_error_is_found = False\n    for error_object in errors:\n        message = error_object[\"msg\"]\n        location = \".\".join(error_object[\"loc\"])  # type: ignore\n        input = error_object[\"input\"]\n\n        # Check if this is a custom error message:\n        custom_message, custom_location, custom_input_value = (\n            get_error_message_and_location_and_value_from_a_custom_error(message)\n        )\n        if custom_message is not None:\n            message = custom_message\n            if custom_location != \"\":\n                # If the custom location is not empty, then add it to the location.\n                location = f\"{location}.{custom_location}\"\n            input = custom_input_value\n\n        # Don't show unwanted texts in the error message:\n        for unwanted_text in unwanted_texts:\n            message = message.replace(unwanted_text, \"\")\n\n        # Convert the error message to a more user-friendly message if it's in the\n        # error_dictionary:\n        if message in error_dictionary:\n            message = error_dictionary[message]\n\n        # Special case for end_date because Pydantic returns multiple end_date errors\n        # since it has multiple valid formats:\n        if \"end_date\" in location:\n            if end_date_error_is_found:\n                continue\n            end_date_error_is_found = True\n            message = (\n                \"This is not a valid end date! Please use either YYYY-MM-DD, YYYY-MM,\"\n                ' or YYYY format or \"present\"!'\n            )\n\n        # If the input is a dictionary or a list (the model itself fails to validate),\n        # then don't show the input. It looks confusing and it is not helpful.\n        if isinstance(input, (dict, list)):\n            input = \"\"\n\n        new_error = {\n            \"loc\": str(location),\n            \"msg\": message,\n            \"input\": str(input),\n        }\n\n        # if new_error is not in new_errors, then add it to new_errors\n        if new_error not in new_errors:\n            new_errors.append(new_error)\n\n    # Print the errors in a nice table:\n    table = rich.table.Table(\n        title=\"[bold red]\\nThere are some errors in the data model!\\n\",\n        title_justify=\"left\",\n        show_lines=True,\n    )\n    table.add_column(\"Location\", style=\"cyan\", no_wrap=True)\n    table.add_column(\"Input Value\", style=\"magenta\")\n    table.add_column(\"Error Message\", style=\"orange4\")\n\n    for error_object in new_errors:\n        table.add_row(\n            error_object[\"loc\"],\n            error_object[\"input\"],\n            error_object[\"msg\"],\n        )\n\n    print(table)\n    error()  # exit the program\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.handle_exceptions","title":"<code>handle_exceptions(function)</code>","text":"<p>Return a wrapper function that handles exceptions.</p> <p>A decorator in Python is a syntactic convenience that allows a Python to interpret the code below:</p> <p><pre><code>@handle_exceptions\ndef my_function():\n    pass\n</code></pre> as <pre><code>handle_exceptions(my_function)()\n</code></pre> which is step by step equivalent to</p> <ol> <li>Execute <code>handle_exceptions(my_function)</code> which will return the     function called <code>wrapper</code>.</li> <li>Execute <code>wrapper()</code>.</li> </ol> <p>Parameters:</p> <ul> <li> <code>function</code>               (<code>Callable</code>)           \u2013            <p>The function to be wrapped.</p> </li> </ul> <p>Returns:     Callable: The wrapped function.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def handle_exceptions(function: Callable) -&gt; Callable:\n    \"\"\"Return a wrapper function that handles exceptions.\n\n    A decorator in Python is a syntactic convenience that allows a Python to interpret\n    the code below:\n\n    ```python\n    @handle_exceptions\n    def my_function():\n        pass\n    ```\n    as\n    ```python\n    handle_exceptions(my_function)()\n    ```\n    which is step by step equivalent to\n\n    1.  Execute `#!python handle_exceptions(my_function)` which will return the\n        function called `wrapper`.\n    2.  Execute `#!python wrapper()`.\n\n    Args:\n        function (Callable): The function to be wrapped.\n    Returns:\n        Callable: The wrapped function.\n    \"\"\"\n\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        try:\n            function(*args, **kwargs)\n        except pydantic.ValidationError as e:\n            handle_validation_error(e)\n        except ruamel.yaml.YAMLError as e:\n            error(\"There is a YAML error in the input file!\", e)\n        except FileNotFoundError as e:\n            error(e)\n        except UnicodeDecodeError as e:\n            # find the problematic character that cannot be decoded with utf-8\n            bad_character = str(e.object[e.start : e.end])\n            try:\n                bad_character_context = str(e.object[e.start - 16 : e.end + 16])\n            except IndexError:\n                bad_character_context = \"\"\n\n            error(\n                \"The input file contains a character that cannot be decoded with\"\n                f\" UTF-8 ({bad_character}):\\n {bad_character_context}\",\n            )\n        except ValueError as e:\n            error(e)\n        except typer.Exit:\n            pass\n        except RuntimeError as e:\n            error(e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.copy_templates","title":"<code>copy_templates(folder_name, copy_to, new_folder_name=None, suppress_warning=False)</code>","text":"<p>Copy one of the folders found in <code>rendercv.templates</code> to <code>copy_to</code>.</p> <p>Parameters:</p> <ul> <li> <code>folder_name</code>               (<code>str</code>)           \u2013            <p>The name of the folder to be copied.</p> </li> <li> <code>copy_to</code>               (<code>Path</code>)           \u2013            <p>The path to copy the folder to.</p> </li> </ul> <p>Returns:     Optional[pathlib.Path]: The path to the copied folder.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def copy_templates(\n    folder_name: str,\n    copy_to: pathlib.Path,\n    new_folder_name: Optional[str] = None,\n    suppress_warning: bool = False,\n) -&gt; Optional[pathlib.Path]:\n    \"\"\"Copy one of the folders found in `rendercv.templates` to `copy_to`.\n\n    Args:\n        folder_name (str): The name of the folder to be copied.\n        copy_to (pathlib.Path): The path to copy the folder to.\n    Returns:\n        Optional[pathlib.Path]: The path to the copied folder.\n    \"\"\"\n    # copy the package's theme files to the current directory\n    template_directory = pathlib.Path(__file__).parent / \"themes\" / folder_name\n    if new_folder_name:\n        destination = copy_to / new_folder_name\n    else:\n        destination = copy_to / folder_name\n\n    if destination.exists():\n        if not suppress_warning:\n            if folder_name != \"markdown\":\n                warning(\n                    f'The theme folder \"{folder_name}\" already exists! New theme files'\n                    \" are not created.\"\n                )\n            else:\n                warning(\n                    'The folder \"markdown\" already exists! New markdown files are not'\n                    \" created.\"\n                )\n\n        return None\n    else:\n        # copy the folder but don't include __init__.py:\n        shutil.copytree(\n            template_directory,\n            destination,\n            ignore=shutil.ignore_patterns(\"__init__.py\"),\n        )\n\n        return destination\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.parse_data_model_override_arguments","title":"<code>parse_data_model_override_arguments(extra_arguments)</code>","text":"<p>Parse extra arguments as data model key and value pairs and return them as a dictionary.</p> <p>Parameters:</p> <ul> <li> <code>extra_arguments</code>               (<code>Context</code>)           \u2013            <p>The extra arguments context.</p> </li> </ul> <p>Returns:     dict[\"str\", \"str\"]: The key and value pairs.</p> Source code in <code>rendercv/cli.py</code> <pre><code>def parse_data_model_override_arguments(\n    extra_arguments: typer.Context,\n) -&gt; dict[\"str\", \"str\"]:\n    \"\"\"Parse extra arguments as data model key and value pairs and return them as a\n    dictionary.\n\n    Args:\n        extra_arguments (typer.Context): The extra arguments context.\n    Returns:\n        dict[\"str\", \"str\"]: The key and value pairs.\n    \"\"\"\n    key_and_values: dict[\"str\", \"str\"] = dict()\n\n    # `extra_arguments.args` is a list of arbitrary arguments that haven't been\n    # specified in `cli_render_command` function's definition. They are used to allow\n    # users to edit their data model in CLI. The elements with even indexes in this list\n    # are keys that start with double dashed, such as\n    # `--cv.sections.education.0.institution`. The following elements are the\n    # corresponding values of the key, such as `\"Bogazici University\"`. The for loop\n    # below parses `ctx.args` accordingly.\n\n    if len(extra_arguments.args) % 2 != 0:\n        error(\n            \"There is a problem with the extra arguments! Each key should have\"\n            \" a corresponding value.\"\n        )\n\n    for i in range(0, len(extra_arguments.args), 2):\n        key = extra_arguments.args[i]\n        value = extra_arguments.args[i + 1]\n        if not key.startswith(\"--\"):\n            error(f\"The key ({key}) should start with double dashes!\")\n\n        key = key.replace(\"--\", \"\")\n\n        key_and_values[key] = value\n\n    return key_and_values\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.cli_command_render","title":"<code>cli_command_render(input_file_name, use_local_latex_command=None, output_folder_name='rendercv_output', latex_path=None, pdf_path=None, markdown_path=None, html_path=None, png_path=None, dont_generate_markdown=False, dont_generate_html=False, dont_generate_png=False, extra_data_model_override_argumets=None)</code>","text":"<p>Generate a $\\LaTeX$ CV from a YAML input file.</p> Source code in <code>rendercv/cli.py</code> <pre><code>@app.command(\n    name=\"render\",\n    help=(\n        \"Render a YAML input file. Example: [bold green]rendercv render\"\n        \" John_Doe_CV.yaml[/bold green]\"\n    ),\n    # allow extra arguments for updating the data model:\n    context_settings={\"allow_extra_args\": True, \"ignore_unknown_options\": True},\n)\n@handle_exceptions\ndef cli_command_render(\n    input_file_name: Annotated[\n        str,\n        typer.Argument(help=\"Name of the YAML input file.\"),\n    ],\n    use_local_latex_command: Annotated[\n        Optional[str],\n        typer.Option(\n            help=(\n                \"Use the local LaTeX installation with the given command instead of the\"\n                \" RenderCV's TinyTeX.\"\n            ),\n        ),\n    ] = None,\n    output_folder_name: Annotated[\n        str,\n        typer.Option(\n            help=\"Name of the output folder.\",\n        ),\n    ] = \"rendercv_output\",\n    latex_path: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"Copy the LaTeX file to the given path.\",\n        ),\n    ] = None,\n    pdf_path: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"Copy the PDF file to the given path.\",\n        ),\n    ] = None,\n    markdown_path: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"Copy the Markdown file to the given path.\",\n        ),\n    ] = None,\n    html_path: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"Copy the HTML file to the given path.\",\n        ),\n    ] = None,\n    png_path: Annotated[\n        Optional[str],\n        typer.Option(\n            help=\"Copy the PNG file to the given path.\",\n        ),\n    ] = None,\n    dont_generate_markdown: Annotated[\n        bool,\n        typer.Option(\n            \"--dont-generate-markdown\",\n            help=\"Don't generate the Markdown and HTML file.\",\n        ),\n    ] = False,\n    dont_generate_html: Annotated[\n        bool,\n        typer.Option(\n            \"--dont-generate-html\",\n            help=\"Don't generate the HTML file.\",\n        ),\n    ] = False,\n    dont_generate_png: Annotated[\n        bool,\n        typer.Option(\n            \"--dont-generate-png\",\n            help=\"Don't generate the PNG file.\",\n        ),\n    ] = False,\n    extra_data_model_override_argumets: typer.Context = None,\n):\n    \"\"\"Generate a $\\\\LaTeX$ CV from a YAML input file.\"\"\"\n    welcome()\n\n    input_file_path = pathlib.Path(input_file_name)\n    output_directory = pathlib.Path.cwd() / output_folder_name\n\n    # change the current working directory to the input file's directory (because\n    # the template overrides are looked up in the current working directory):\n    os.chdir(input_file_path.parent)\n\n    # compute the number of steps\n    # 1. read and validate the input file\n    # 2. generate the LaTeX file\n    # 3. render the LaTeX file to a PDF\n    # 4. render PNG files from the PDF\n    # 5. generate the Markdown file\n    # 6. render the Markdown file to a HTML (for Grammarly)\n    number_of_steps = 6\n    if dont_generate_png:\n        number_of_steps = number_of_steps - 1\n    if dont_generate_markdown:\n        number_of_steps = number_of_steps - 2\n    else:\n        if dont_generate_html:\n            number_of_steps = number_of_steps - 1\n\n    with LiveProgressReporter(number_of_steps) as progress:\n        progress.start_a_step(\"Reading and validating the input file\")\n        data_model = dm.read_input_file(input_file_path)\n\n        # update the data model if there are extra arguments:\n        key_and_values = dict()\n\n        if extra_data_model_override_argumets:\n            key_and_values = parse_data_model_override_arguments(\n                extra_data_model_override_argumets\n            )\n            for key, value in key_and_values.items():\n                try:\n                    # set the key (for example, cv.sections.education.0.institution) to\n                    # the value\n                    data_model = dm.set_or_update_a_value(data_model, key, value)\n                except pydantic.ValidationError as e:\n                    raise e\n                except (ValueError, KeyError, IndexError, AttributeError):\n                    raise ValueError(\n                        f'The key \"{key}\" does not exist in the data model!'\n                    )\n\n        progress.finish_the_current_step()\n\n        progress.start_a_step(\"Generating the LaTeX file\")\n        latex_file_path_in_output_folder = r.generate_latex_file_and_copy_theme_files(\n            data_model, output_directory\n        )\n        if latex_path:\n            shutil.copy2(latex_file_path_in_output_folder, latex_path)\n        progress.finish_the_current_step()\n\n        progress.start_a_step(\"Rendering the LaTeX file to a PDF\")\n        pdf_file_path_in_output_folder = r.latex_to_pdf(\n            latex_file_path_in_output_folder, use_local_latex_command\n        )\n        if pdf_path:\n            shutil.copy2(pdf_file_path_in_output_folder, pdf_path)\n        progress.finish_the_current_step()\n\n        if not dont_generate_png:\n            progress.start_a_step(\"Rendering PNG files from the PDF\")\n            png_file_paths_in_output_folder = r.pdf_to_pngs(\n                pdf_file_path_in_output_folder\n            )\n            if png_path:\n                if len(png_file_paths_in_output_folder) == 1:\n                    shutil.copy2(png_file_paths_in_output_folder[0], png_path)\n                else:\n                    for i, png_file_path in enumerate(png_file_paths_in_output_folder):\n                        # append the page number to the file name\n                        page_number = i + 1\n                        png_path_with_page_number = (\n                            pathlib.Path(png_path).parent\n                            / f\"{pathlib.Path(png_path).stem}_{page_number}.png\"\n                        )\n                        shutil.copy2(png_file_path, png_path_with_page_number)\n            progress.finish_the_current_step()\n\n        if not dont_generate_markdown:\n            progress.start_a_step(\"Generating the Markdown file\")\n            markdown_file_path_in_output_folder = r.generate_markdown_file(\n                data_model, output_directory\n            )\n            if markdown_path:\n                shutil.copy2(markdown_file_path_in_output_folder, markdown_path)\n            progress.finish_the_current_step()\n\n            if not dont_generate_html:\n                progress.start_a_step(\n                    \"Rendering the Markdown file to a HTML (for Grammarly)\"\n                )\n                html_file_path_in_output_folder = r.markdown_to_html(\n                    markdown_file_path_in_output_folder\n                )\n                if html_path:\n                    shutil.copy2(html_file_path_in_output_folder, html_path)\n                progress.finish_the_current_step()\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.cli_command_new","title":"<code>cli_command_new(full_name, theme='classic', dont_create_theme_source_files=False, dont_create_markdown_source_files=False)</code>","text":"<p>Generate a YAML input file to get started.</p> Source code in <code>rendercv/cli.py</code> <pre><code>@app.command(\n    name=\"new\",\n    help=(\n        \"Generate a YAML input file to get started. Example: [bold green]rendercv new\"\n        ' \"John Doe\"[/bold green]'\n    ),\n)\ndef cli_command_new(\n    full_name: Annotated[str, typer.Argument(help=\"Your full name.\")],\n    theme: Annotated[\n        str,\n        typer.Option(\n            help=(\n                \"The name of the theme. Available themes are:\"\n                f\" {', '.join(dm.available_themes)}.\"\n            )\n        ),\n    ] = \"classic\",\n    dont_create_theme_source_files: Annotated[\n        bool,\n        typer.Option(\n            \"--dont-create-theme-source-files\",\n            help=\"Don't create theme source files.\",\n        ),\n    ] = False,\n    dont_create_markdown_source_files: Annotated[\n        bool,\n        typer.Option(\n            \"--dont-create-markdown-source-files\",\n            help=\"Don't create the Markdown source files.\",\n        ),\n    ] = False,\n):\n    \"\"\"Generate a YAML input file to get started.\"\"\"\n    created_files_and_folders = []\n\n    input_file_name = f\"{full_name.replace(' ', '_')}_CV.yaml\"\n    input_file_path = pathlib.Path(input_file_name)\n\n    if input_file_path.exists():\n        warning(\n            f'The input file \"{input_file_name}\" already exists! A new input file is'\n            \" not created.\"\n        )\n    else:\n        try:\n            dm.create_a_sample_yaml_input_file(\n                input_file_path, name=full_name, theme=theme\n            )\n        except ValueError as e:\n            error(e)\n\n    if not dont_create_theme_source_files:\n        # copy the package's theme files to the current directory\n        theme_folder = copy_templates(theme, pathlib.Path.cwd())\n        if theme_folder is not None:\n            created_files_and_folders.append(theme_folder.name)\n\n    if not dont_create_markdown_source_files:\n        # copy the package's markdown files to the current directory\n        markdown_folder = copy_templates(\"markdown\", pathlib.Path.cwd())\n        if markdown_folder is not None:\n            created_files_and_folders.append(markdown_folder.name)\n\n    if len(created_files_and_folders) &gt; 0:\n        created_files_and_folders_string = \",\\n\".join(created_files_and_folders)\n        information(\n            \"The following RenderCV input file and folders have been\"\n            f\" created:\\n{created_files_and_folders_string}\"\n        )\n</code></pre>"},{"location":"reference/cli/#rendercv.cli.cli_command_create_theme","title":"<code>cli_command_create_theme(theme_name, based_on='classic')</code>","text":"<p>Create a custom theme folder based on an existing theme.</p> Source code in <code>rendercv/cli.py</code> <pre><code>@app.command(\n    name=\"create-theme\",\n    help=(\n        \"Create a custom theme folder based on an existing theme. Example: [bold\"\n        \" green]rendercv create-theme --based-on classic customtheme[/bold green]\"\n    ),\n)\ndef cli_command_create_theme(\n    theme_name: Annotated[\n        str,\n        typer.Argument(help=\"The name of the new theme.\"),\n    ],\n    based_on: Annotated[\n        str,\n        typer.Option(\n            help=(\n                \"The name of the existing theme to base the new theme on. Available\"\n                f\" themes are: {', '.join(dm.available_themes)}.\"\n            )\n        ),\n    ] = \"classic\",\n):\n    \"\"\"Create a custom theme folder based on an existing theme.\"\"\"\n    if based_on not in dm.available_themes:\n        error(\n            f'The theme \"{based_on}\" is not in the list of available themes:'\n            f' {\", \".join(dm.available_themes)}'\n        )\n\n    theme_folder = copy_templates(\n        based_on, pathlib.Path.cwd(), new_folder_name=theme_name, suppress_warning=True\n    )\n\n    if theme_folder is None:\n        warning(\n            f'The theme folder \"{theme_name}\" already exists! The theme files are not'\n            \" created.\"\n        )\n        return\n\n    based_on_theme_directory = pathlib.Path(__file__).parent / \"themes\" / based_on\n    based_on_theme_init_file = based_on_theme_directory / \"__init__.py\"\n    based_on_theme_init_file_contents = based_on_theme_init_file.read_text()\n\n    # generate the new init file:\n    class_name = f\"{theme_name.capitalize()}ThemeOptions\"\n    literal_name = f'Literal[\"{theme_name}\"]'\n    new_init_file_contents = (\n        based_on_theme_init_file_contents.replace(\n            f'Literal[\"{based_on}\"]', literal_name\n        )\n        .replace(f\"{based_on.capitalize()}ThemeOptions\", class_name)\n        .replace(\"..\", \"rendercv.themes\")\n    )\n\n    # create the new __init__.py file:\n    (theme_folder / \"__init__.py\").write_text(new_init_file_contents)\n\n    information(f'The theme folder \"{theme_folder.name}\" has been created.')\n</code></pre>"},{"location":"reference/data_models/","title":"Data Models","text":"<p>This module contains all the necessary classes to store CV data. These classes are called data models. The YAML input file is transformed into instances of these classes (i.e., the input file is read) with the <code>read_input_file</code> function. RenderCV utilizes these instances to generate a $\\LaTeX$ file which is then rendered into a PDF file.</p> <p>The data models are initialized with data validation to prevent unexpected bugs. During the initialization, we ensure that everything is in the correct place and that the user has provided a valid RenderCV input. This is achieved through the use of Pydantic. Each class method decorated with <code>pydantic.model_validator</code> or <code>pydantic.field_validator</code> is executed automatically during the data classes' initialization.</p>"},{"location":"reference/data_models/#rendercv.data_models.RenderCVBaseModel","title":"<code>RenderCVBaseModel</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is the parent class of all the data models in RenderCV. It has only one difference from the default <code>pydantic.BaseModel</code>: It raises an error if an unknown key is provided in the input file.</p>"},{"location":"reference/data_models/#rendercv.data_models.OneLineEntry","title":"<code>OneLineEntry</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the data model of <code>OneLineEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.BulletEntry","title":"<code>BulletEntry</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the data model of <code>BulletEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.EntryWithDate","title":"<code>EntryWithDate</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p>"},{"location":"reference/data_models/#rendercv.data_models.EntryWithDate.check_date","title":"<code>check_date(date)</code>  <code>classmethod</code>","text":"<p>Check if the date is provided correctly.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\"date\", mode=\"before\")\n@classmethod\ndef check_date(\n    cls, date: Optional[int | RenderCVDate | str]\n) -&gt; Optional[int | RenderCVDate | str]:\n    \"\"\"Check if the date is provided correctly.\"\"\"\n    date_is_provided = date is not None\n\n    if date_is_provided:\n        if isinstance(date, str):\n            date_pattern = r\"\\d{4}(-\\d{2})?(-\\d{2})?\"\n            if re.fullmatch(date_pattern, date):\n                # Then it is in YYYY-MM-DD, YYYY-MM, or YYYY format\n                # Check if it is a valid date:\n                get_date_object(date)\n\n                # check if it is in YYYY format, and if so, convert it to an\n                # integer:\n                if re.fullmatch(r\"\\d{4}\", date):\n                    # This is not required for start_date and end_date because they\n                    # can't be casted into a general string. For date, this needs to\n                    # be done manually, because it can be a general string.\n                    date = int(date)\n        elif isinstance(date, Date):\n            # Pydantic parses YYYY-MM-DD dates as datetime.date objects. We need to\n            # convert them to strings because that's how RenderCV uses them.\n            date = date.isoformat()\n\n    return date\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.PublicationEntryBase","title":"<code>PublicationEntryBase</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p>"},{"location":"reference/data_models/#rendercv.data_models.PublicationEntryBase.doi_url","title":"<code>doi_url: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return the URL of the DOI.</p>"},{"location":"reference/data_models/#rendercv.data_models.PublicationEntryBase.check_doi","title":"<code>check_doi(doi)</code>  <code>classmethod</code>","text":"<p>Check if the DOI exists in the DOI System.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\"doi\")\n@classmethod\ndef check_doi(cls, doi: Optional[str]) -&gt; Optional[str]:\n    \"\"\"Check if the DOI exists in the DOI System.\"\"\"\n    if doi is not None:\n        # see https://stackoverflow.com/a/60671292/18840665 for the explanation of\n        # the next line:\n        ssl._create_default_https_context = ssl._create_unverified_context  # type: ignore\n\n        doi_url = f\"http://doi.org/{doi}\"\n\n        try:\n            urlopen(doi_url)\n        except HTTPError as err:\n            if err.code == 404:\n                raise ValueError(\"DOI cannot be found in the DOI System!\")\n        except (InvalidURL, URLError):\n            raise ValueError(\"This DOI is not valid!\")\n\n    return doi\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.PublicationEntry","title":"<code>PublicationEntry</code>","text":"<p>               Bases: <code>EntryWithDate</code>, <code>PublicationEntryBase</code></p> <p>This class is the data model of <code>PublicationEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.EntryBase","title":"<code>EntryBase</code>","text":"<p>               Bases: <code>EntryWithDate</code></p> <p>This class is the parent class of some of the entry types. It is being used because some of the entry types have common fields like dates, highlights, location, etc.</p>"},{"location":"reference/data_models/#rendercv.data_models.EntryBase.date_string","title":"<code>date_string: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return a date string based on the <code>date</code>, <code>start_date</code>, and <code>end_date</code> fields.</p> Example <p><pre><code>entry = dm.EntryBase(start_date=\"2020-10-11\", end_date=\"2021-04-04\").date_string\n</code></pre> will return: <code>\"Nov. 2020 to Apr. 2021\"</code></p>"},{"location":"reference/data_models/#rendercv.data_models.EntryBase.date_string_only_years","title":"<code>date_string_only_years: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return a date string that only contains years based on the <code>date</code>, <code>start_date</code>, and <code>end_date</code> fields.</p> Example <p><pre><code>entry = dm.EntryBase(start_date=\"2020-10-11\", end_date=\"2021-04-04\").date_string\n</code></pre> will return: <code>\"2020 to 2021\"</code></p>"},{"location":"reference/data_models/#rendercv.data_models.EntryBase.time_span_string","title":"<code>time_span_string: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return a time span string based on the <code>date</code>, <code>start_date</code>, and <code>end_date</code> fields.</p> Example <p><pre><code>entry = dm.EntryBase(start_date=\"2020-01-01\", end_date=\"2020-04-20\").time_span\n</code></pre> will return: <code>\"4 months\"</code></p>"},{"location":"reference/data_models/#rendercv.data_models.EntryBase.check_and_adjust_dates","title":"<code>check_and_adjust_dates()</code>","text":"<p>Check if the dates are provided correctly and do the necessary adjustments.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.model_validator(\n    mode=\"after\",\n)\ndef check_and_adjust_dates(self) -&gt; \"EntryBase\":\n    \"\"\"\n    Check if the dates are provided correctly and do the necessary adjustments.\n    \"\"\"\n    date_is_provided = self.date is not None\n    start_date_is_provided = self.start_date is not None\n    end_date_is_provided = self.end_date is not None\n\n    if date_is_provided:\n        # If only date is provided, ignore start_date and end_date:\n        self.start_date = None\n        self.end_date = None\n    elif not start_date_is_provided and end_date_is_provided:\n        # If only end_date is provided, assume it is a one-day event and act like\n        # only the date is provided:\n        self.date = self.end_date\n        self.start_date = None\n        self.end_date = None\n    elif start_date_is_provided:\n        start_date = get_date_object(self.start_date)\n        if not end_date_is_provided:\n            # If only start_date is provided, assume it is an ongoing event, i.e.,\n            # the end_date is present:\n            self.end_date = \"present\"\n            end_date = Date.today()\n        else:\n            end_date = get_date_object(self.end_date)\n\n        if start_date &gt; end_date:\n            raise ValueError(\n                '\"start_date\" can not be after \"end_date\"!',\n                \"start_date\",  # this is the location of the error\n                str(start_date),  # this is value of the error\n            )\n\n    return self\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.NormalEntry","title":"<code>NormalEntry</code>","text":"<p>               Bases: <code>EntryBase</code>, <code>NormalEntryBase</code></p> <p>This class is the data model of <code>NormalEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.ExperienceEntry","title":"<code>ExperienceEntry</code>","text":"<p>               Bases: <code>EntryBase</code>, <code>ExperienceEntryBase</code></p> <p>This class is the data model of <code>ExperienceEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.EducationEntry","title":"<code>EducationEntry</code>","text":"<p>               Bases: <code>EntryBase</code>, <code>EducationEntryBase</code></p> <p>This class is the data model of <code>EducationEntry</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.SectionBase","title":"<code>SectionBase</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the parent class of all the section types. It is being used because all of the section types have a common field called <code>title</code>.</p>"},{"location":"reference/data_models/#rendercv.data_models.SocialNetwork","title":"<code>SocialNetwork</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the data model of a social network.</p>"},{"location":"reference/data_models/#rendercv.data_models.SocialNetwork.url","title":"<code>url: str</code>  <code>cached</code> <code>property</code>","text":"<p>Return the URL of the social network.</p>"},{"location":"reference/data_models/#rendercv.data_models.SocialNetwork.check_username","title":"<code>check_username(username, info)</code>  <code>classmethod</code>","text":"<p>Check if the username is provided correctly.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\"username\")\n@classmethod\ndef check_username(cls, username: str, info: pydantic.ValidationInfo) -&gt; str:\n    \"\"\"Check if the username is provided correctly.\"\"\"\n    network = info.data[\"network\"]\n\n    if network == \"Mastodon\":\n        mastodon_username_pattern = r\"@[^@]+@[^@]+\"\n        if not re.fullmatch(mastodon_username_pattern, username):\n            raise ValueError(\n                'Mastodon username should be in the format \"@username@domain\"!'\n            )\n    if network == \"StackOverflow\":\n        stackoverflow_username_pattern = r\"\\d+\\/[^\\/]+\"\n        if not re.fullmatch(stackoverflow_username_pattern, username):\n            raise ValueError(\n                'StackOverflow username should be in the format \"user_id/username\"!'\n            )\n    if network == \"YouTube\":\n        youtube_username_pattern = r\"@[^@]+\"\n        if not re.fullmatch(youtube_username_pattern, username):\n            raise ValueError(\n                'YouTube username should be in the format \"@username\"!'\n            )\n\n    return username\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.SocialNetwork.check_url","title":"<code>check_url()</code>","text":"<p>Validate the URLs of the social networks.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.model_validator(mode=\"after\")  # type: ignore\ndef check_url(self) -&gt; \"SocialNetwork\":\n    \"\"\"Validate the URLs of the social networks.\"\"\"\n    url = self.url\n\n    url_validator.validate_strings(url)\n\n    return self\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.CurriculumVitae","title":"<code>CurriculumVitae</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the data model of the CV.</p>"},{"location":"reference/data_models/#rendercv.data_models.CurriculumVitae.connections","title":"<code>connections: list[dict[str, str]]</code>  <code>cached</code> <code>property</code>","text":"<p>Return all the connections of the person.</p>"},{"location":"reference/data_models/#rendercv.data_models.CurriculumVitae.sections","title":"<code>sections: list[SectionBase]</code>  <code>cached</code> <code>property</code>","text":"<p>Return all the sections of the CV with their titles.</p>"},{"location":"reference/data_models/#rendercv.data_models.LocaleCatalog","title":"<code>LocaleCatalog</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class is the data model of the locale catalog. The values of each field updates the <code>locale_catalog</code> dictionary.</p>"},{"location":"reference/data_models/#rendercv.data_models.LocaleCatalog.update_translations","title":"<code>update_translations(value, info)</code>  <code>classmethod</code>","text":"<p>Update the <code>locale_catalog</code> dictionary with the provided translations.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\n    \"month\", \"months\", \"year\", \"years\", \"present\", \"abbreviations_for_months\", \"to\"\n)\n@classmethod\ndef update_translations(cls, value: str, info: pydantic.ValidationInfo) -&gt; str:\n    \"\"\"Update the `locale_catalog` dictionary with the provided translations.\"\"\"\n    if value:\n        locale_catalog[info.field_name] = value\n\n    return value\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.RenderCVDataModel","title":"<code>RenderCVDataModel</code>","text":"<p>               Bases: <code>RenderCVBaseModel</code></p> <p>This class binds both the CV and the design information together.</p>"},{"location":"reference/data_models/#rendercv.data_models.RenderCVDataModel.initialize_if_custom_theme_is_used","title":"<code>initialize_if_custom_theme_is_used(design)</code>  <code>classmethod</code>","text":"<p>Initialize the custom theme if it is used and validate it. Otherwise, return the built-in theme.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\"design\", mode=\"before\")\n@classmethod\ndef initialize_if_custom_theme_is_used(\n    cls, design: RenderCVDesign | Any\n) -&gt; RenderCVDesign | Any:\n    \"\"\"Initialize the custom theme if it is used and validate it. Otherwise, return\n    the built-in theme.\"\"\"\n    # `get_args` for an Annotated object returns the arguments when Annotated is\n    # used. The first argument is actually the union of the types, so we need to\n    # access the first argument to use isinstance function.\n    theme_data_model_types = get_args(RenderCVDesign)[0]\n\n    if isinstance(design, theme_data_model_types):\n        # then it means RenderCVDataModel is already initialized with a design, so\n        # return it as is:\n        return design\n    elif design[\"theme\"] in available_themes:  # type: ignore\n        # then it means it's a built-in theme, but it is not initialized (validated)\n        # yet. So, validate and return it:\n        return rendercv_design_validator.validate_python(design)\n    else:\n        # then it means it is a custom theme, so initialize and validate it:\n        theme_name: str = str(design[\"theme\"])\n\n        # check if the theme name is valid:\n        if not theme_name.isalpha():\n            raise ValueError(\n                \"The custom theme name should contain only letters.\",\n                \"theme\",  # this is the location of the error\n                theme_name,  # this is value of the error\n            )\n\n        # then it is a custom theme\n        custom_theme_folder = pathlib.Path(theme_name)\n\n        # check if the custom theme folder exists:\n        if not custom_theme_folder.exists():\n            raise ValueError(\n                f\"The custom theme folder `{custom_theme_folder}` does not exist.\"\n                \" It should be in the working directory as the input file.\",\n                \"\",  # this is the location of the error\n                theme_name,  # this is value of the error\n            )\n\n        # check if all the necessary files are provided in the custom theme folder:\n        required_entry_files = [\n            entry_type_name + \".j2.tex\" for entry_type_name in entry_type_names\n        ]\n        required_files = [\n            \"SectionBeginning.j2.tex\",  # section beginning template\n            \"SectionEnding.j2.tex\",  # section ending template\n            \"Preamble.j2.tex\",  # preamble template\n            \"Header.j2.tex\",  # header template\n        ] + required_entry_files\n\n        for file in required_files:\n            file_path = custom_theme_folder / file\n            if not file_path.exists():\n                raise ValueError(\n                    f\"You provided a custom theme, but the file `{file}` is not\"\n                    f\" found in the folder `{custom_theme_folder}`.\",\n                    \"\",  # this is the location of the error\n                    theme_name,  # this is value of the error\n                )\n\n        # import __init__.py file from the custom theme folder if it exists:\n        path_to_init_file = pathlib.Path(f\"{theme_name}/__init__.py\")\n\n        if path_to_init_file.exists():\n            spec = importlib.util.spec_from_file_location(\n                \"theme\",\n                path_to_init_file,\n            )\n\n            theme_module = importlib.util.module_from_spec(spec)\n            try:\n                spec.loader.exec_module(theme_module)  # type: ignore\n            except SyntaxError or ImportError:\n                raise ValueError(\n                    f\"The custom theme {theme_name}'s __init__.py file is not\"\n                    \" valid. Please check the file and try again.\",\n                )\n\n            ThemeDataModel = getattr(\n                theme_module, f\"{theme_name.capitalize()}ThemeOptions\"  # type: ignore\n            )\n\n            # initialize and validate the custom theme data model:\n            theme_data_model = ThemeDataModel(**design)\n        else:\n            # Then it means there is no __init__.py file in the custom theme folder.\n            # So, create a dummy data model and use that instead.\n            class ThemeOptionsAreNotProvided(RenderCVBaseModel):\n                theme: str = theme_name\n\n            theme_data_model = ThemeOptionsAreNotProvided(theme=theme_name)\n\n        return theme_data_model\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.RenderCVDataModel.initialize_locale_catalog","title":"<code>initialize_locale_catalog(locale_catalog)</code>  <code>classmethod</code>","text":"<p>Even if the locale catalog is not provided, initialize it with the default values.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>@pydantic.field_validator(\"locale_catalog\")\n@classmethod\ndef initialize_locale_catalog(cls, locale_catalog: LocaleCatalog) -&gt; LocaleCatalog:\n    \"\"\"Even if the locale catalog is not provided, initialize it with the default\n    values.\"\"\"\n    if locale_catalog is None:\n        LocaleCatalog()\n\n    return locale_catalog\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.get_date_object","title":"<code>get_date_object(date)</code>","text":"<p>Parse a date string in YYYY-MM-DD, YYYY-MM, or YYYY format and return a <code>datetime.date</code> object. This function is used throughout the validation process of the data models.</p> <p>Parameters:</p> <ul> <li> <code>date</code>               (<code>str</code>)           \u2013            <p>The date string to parse.</p> </li> </ul> <p>Returns:     datetime.date: The parsed date.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def get_date_object(date: str | int) -&gt; Date:\n    \"\"\"Parse a date string in YYYY-MM-DD, YYYY-MM, or YYYY format and return a\n    `datetime.date` object. This function is used throughout the validation process of\n    the data models.\n\n    Args:\n        date (str): The date string to parse.\n    Returns:\n        datetime.date: The parsed date.\n    \"\"\"\n    if isinstance(date, int):\n        date_object = Date.fromisoformat(f\"{date}-01-01\")\n    elif re.fullmatch(r\"\\d{4}-\\d{2}-\\d{2}\", date):\n        # Then it is in YYYY-MM-DD format\n        date_object = Date.fromisoformat(date)\n    elif re.fullmatch(r\"\\d{4}-\\d{2}\", date):\n        # Then it is in YYYY-MM format\n        date_object = Date.fromisoformat(f\"{date}-01\")\n    elif re.fullmatch(r\"\\d{4}\", date):\n        # Then it is in YYYY format\n        date_object = Date.fromisoformat(f\"{date}-01-01\")\n    elif date == \"present\":\n        date_object = Date.today()\n    else:\n        raise ValueError(\n            \"This is not a valid date! Please use either YYYY-MM-DD, YYYY-MM, or\"\n            \" YYYY format.\"\n        )\n\n    return date_object\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.format_date","title":"<code>format_date(date)</code>","text":"<p>Formats a <code>Date</code> object to a string in the following format: \"Jan. 2021\".</p> <p>It uses month abbreviations, taken from Yale University Library.</p> Example <p><pre><code>format_date(Date(2024, 5, 1))\n</code></pre> will return</p> <p><code>\"May 2024\"</code></p> <p>Parameters:</p> <ul> <li> <code>date</code>               (<code>date</code>)           \u2013            <p>The date to format.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The formatted date.</p> </li> </ul> Source code in <code>rendercv/data_models.py</code> <pre><code>def format_date(date: Date) -&gt; str:\n    \"\"\"Formats a `Date` object to a string in the following format: \"Jan. 2021\".\n\n    It uses month abbreviations, taken from\n    [Yale University Library](https://web.library.yale.edu/cataloging/months).\n\n    Example:\n        ```python\n        format_date(Date(2024, 5, 1))\n        ```\n        will return\n\n        `#!python \"May 2024\"`\n\n    Args:\n        date (Date): The date to format.\n\n    Returns:\n        str: The formatted date.\n    \"\"\"\n    # Month abbreviations,\n    # taken from: https://web.library.yale.edu/cataloging/months\n    abbreviations_of_months = locale_catalog[\"abbreviations_for_months\"]\n\n    month = int(date.strftime(\"%m\"))\n    month_abbreviation = abbreviations_of_months[month - 1]\n    year = date.strftime(format=\"%Y\")\n    date_string = f\"{month_abbreviation} {year}\"\n\n    return date_string\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.create_a_section_model","title":"<code>create_a_section_model(entry_type)</code>","text":"<p>Create a section model based on the entry type. See Pydantic's documentation about dynamic model creation for more information.</p> <p>Parameters:</p> <ul> <li> <code>entry_type</code>               (<code>Type[Entry]</code>)           \u2013            <p>The entry type to create the section model.</p> </li> </ul> <p>Returns:     Type[SectionBase]: The section model.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def create_a_section_model(entry_type: Type[Entry]) -&gt; Type[SectionBase]:\n    \"\"\"Create a section model based on the entry type. See [Pydantic's documentation\n    about dynamic model\n    creation](https://pydantic-docs.helpmanual.io/usage/models/#dynamic-model-creation)\n    for more information.\n\n    Args:\n        entry_type (Type[Entry]): The entry type to create the section model.\n    Returns:\n        Type[SectionBase]: The section model.\n    \"\"\"\n    if entry_type == str:\n        model_name = \"SectionWithTextEntries\"\n        entry_type_name = \"TextEntry\"\n    else:\n        model_name = \"SectionWith\" + entry_type.__name__.replace(\"Entry\", \"Entries\")\n        entry_type_name = entry_type.__name__\n\n    SectionModel = pydantic.create_model(\n        model_name,\n        entry_type=(Literal[entry_type_name], ...),  # type: ignore\n        entries=(list[entry_type], ...),\n        __base__=SectionBase,\n    )\n\n    return SectionModel\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.get_entry_and_section_type","title":"<code>get_entry_and_section_type(entry)</code>","text":"<p>Determine the entry and section type based on the entry.</p> <p>Parameters:</p> <ul> <li> <code>entry</code>               (<code>dict[str, Any] | Entry</code>)           \u2013            <p>The entry to determine the type.</p> </li> </ul> <p>Returns:     tuple[str, Type[Section]]: The entry type and the section type.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def get_entry_and_section_type(\n    entry: dict[str, Any] | Entry,\n) -&gt; tuple[\n    str,\n    Type[SectionBase],\n]:\n    \"\"\"Determine the entry and section type based on the entry.\n\n    Args:\n        entry: The entry to determine the type.\n    Returns:\n        tuple[str, Type[Section]]: The entry type and the section type.\n    \"\"\"\n    # Get class attributes of EntryBase class:\n    common_attributes = set(EntryBase.model_fields.keys())\n\n    if isinstance(entry, dict):\n        entry_type = None  # the entry type is not determined yet\n\n        for EntryType in entry_types:\n            characteristic_entry_attributes = (\n                set(EntryType.model_fields.keys()) - common_attributes\n            )\n\n            # If at least one of the characteristic_entry_attributes is in the entry,\n            # then it means the entry is of this type:\n            if characteristic_entry_attributes &amp; set(entry.keys()):\n                entry_type = EntryType.__name__\n                section_type = create_a_section_model(EntryType)\n                break\n\n        if entry_type is None:\n            raise ValueError(\"The entry is not provided correctly.\")\n\n    elif isinstance(entry, str):\n        # Then it is a TextEntry\n        entry_type = \"TextEntry\"\n        section_type = create_a_section_model(str)\n\n    else:\n        # Then the entry is already initialized with a data model:\n        entry_type = entry.__class__.__name__\n        section_type = create_a_section_model(entry.__class__)\n\n    return entry_type, section_type\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.validate_section_input","title":"<code>validate_section_input(sections_input)</code>","text":"<p>Validate a <code>SectionInput</code> object and raise an error if it is not valid.</p> <p>Sections input is very complex. It is either a <code>Section</code> object or a list of entries. Since there are multiple entry types, it is not possible to validate it directly. This function looks at the entry list's first element and determines the section's entry type based on the first element. Then, it validates the rest of the list based on the determined entry type. If it is a <code>Section</code> object, then it validates it directly.</p> <p>Parameters:</p> <ul> <li> <code>sections_input</code>               (<code>SectionBase | list[Any]</code>)           \u2013            <p>The sections input to validate.</p> </li> </ul> <p>Returns:     SectionBase | list[Any]: The validated sections input.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def validate_section_input(\n    sections_input: SectionBase | list[Any],\n) -&gt; SectionBase | list[Any]:\n    \"\"\"Validate a `SectionInput` object and raise an error if it is not valid.\n\n    Sections input is very complex. It is either a `Section` object or a list of\n    entries. Since there are multiple entry types, it is not possible to validate it\n    directly. This function looks at the entry list's first element and determines the\n    section's entry type based on the first element. Then, it validates the rest of the\n    list based on the determined entry type. If it is a `Section` object, then it\n    validates it directly.\n\n    Args:\n        sections_input (SectionBase | list[Any]): The sections input to validate.\n    Returns:\n        SectionBase | list[Any]: The validated sections input.\n    \"\"\"\n    if isinstance(sections_input, list):\n        # find the entry type based on the first identifiable entry:\n        entry_type = None\n        section_type = None\n        for entry in sections_input:\n            try:\n                entry_type, section_type = get_entry_and_section_type(entry)\n                break\n            except ValueError:\n                pass\n\n        if entry_type is None or section_type is None:\n            raise ValueError(\n                \"RenderCV couldn't match this section with any entry type! Please check\"\n                \" the entries and make sure they are provided correctly.\",\n                \"\",  # this is the location of the error\n                \"\",  # this is value of the error\n            )\n\n        test_section = {\n            \"title\": \"Test Section\",\n            \"entry_type\": entry_type,\n            \"entries\": sections_input,\n        }\n\n        try:\n            section_type.model_validate(\n                test_section,\n                context={\"section\": \"test\"},\n            )\n        except pydantic.ValidationError as e:\n            new_error = ValueError(\n                \"There are problems with the entries. RenderCV detected the entry type\"\n                f\" of this section to be {entry_type}! The problems are shown below.\",\n                \"\",  # this is the location of the error\n                \"\",  # this is value of the error\n            )\n            raise new_error from e\n\n    return sections_input\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.set_or_update_a_value","title":"<code>set_or_update_a_value(data_model, key, value, sub_model=None)</code>","text":"<p>Set or update a value in a data model for a specific key. For example, a key can be <code>cv.sections.education.3.institution</code> and the value can be \"Bogazici University\".</p> <p>Parameters:</p> <ul> <li> <code>data_model</code>               (<code>BaseModel | dict | list</code>)           \u2013            <p>The data model to set or update the value.</p> </li> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>The key to set or update the value.</p> </li> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The value to set or update.</p> </li> <li> <code>sub_model</code>               (<code>BaseModel | dict | list</code>, default:                   <code>None</code> )           \u2013            <p>The sub model to set or update the value. This is used for recursive calls. When the value is set to a sub model, the original data model is validated. Defaults to None.</p> </li> </ul> Source code in <code>rendercv/data_models.py</code> <pre><code>def set_or_update_a_value(\n    data_model: pydantic.BaseModel | dict | list,\n    key: str,\n    value: str,\n    sub_model: pydantic.BaseModel | dict | list = None,\n):\n    \"\"\"Set or update a value in a data model for a specific key. For example, a key can\n    be `cv.sections.education.3.institution` and the value can be \"Bogazici University\".\n\n    Args:\n        data_model (pydantic.BaseModel | dict | list): The data model to set or update\n            the value.\n        key (str): The key to set or update the value.\n        value (Any): The value to set or update.\n        sub_model (pydantic.BaseModel | dict | list, optional): The sub model to set or\n            update the value. This is used for recursive calls. When the value is set\n            to a sub model, the original data model is validated. Defaults to None.\n    \"\"\"\n    # recursively call this function until the last key is reached:\n\n    # rename `sections` with `sections_input` since the key is `sections` is an alias:\n    key = key.replace(\"sections.\", \"sections_input.\")\n    keys = key.split(\".\")\n\n    if sub_model is not None:\n        model = sub_model\n    else:\n        model = data_model\n\n    if len(keys) == 1:\n        # set the value:\n        if value.startswith(\"{\") and value.endswith(\"}\"):\n            # allow users to assign dictionaries:\n            value = eval(value)\n        elif value.startswith(\"[\") and value.endswith(\"]\"):\n            # allow users to assign lists:\n            value = eval(value)\n\n        if isinstance(model, pydantic.BaseModel):\n            setattr(model, key, value)\n        elif isinstance(model, dict):\n            model[key] = value\n        elif isinstance(model, list):\n            model[int(key)] = value\n        else:\n            raise ValueError(\n                \"The data model should be either a Pydantic data model, dictionary, or\"\n                \" list.\",\n            )\n\n        data_model = type(data_model).model_validate(\n            (data_model.model_dump(by_alias=True))\n        )\n        return data_model\n    else:\n        # get the first key and call the function with remaining keys:\n        first_key = keys[0]\n        key = \".\".join(keys[1:])\n        if isinstance(model, pydantic.BaseModel):\n            sub_model = getattr(model, first_key)\n        elif isinstance(model, dict):\n            sub_model = model[first_key]\n        elif isinstance(model, list):\n            sub_model = model[int(first_key)]\n        else:\n            raise ValueError(\n                \"The data model should be either a Pydantic data model, dictionary, or\"\n                \" list.\",\n            )\n\n        set_or_update_a_value(data_model, key, value, sub_model)\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.read_input_file","title":"<code>read_input_file(file_path_or_contents)</code>","text":"<p>Read the input file and return two instances of RenderCVDataModel. The first instance is the data model with $\\LaTeX$ strings and the second instance is the data model with markdown strings.</p> <p>Parameters:</p> <ul> <li> <code>file_path_or_contents</code>               (<code>str</code>)           \u2013            <p>The path to the input file or the contents of the input file as a string.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>RenderCVDataModel</code> (              <code>RenderCVDataModel</code> )          \u2013            <p>The data models with $\\LaTeX$ and markdown strings.</p> </li> </ul> Source code in <code>rendercv/data_models.py</code> <pre><code>def read_input_file(\n    file_path_or_contents: pathlib.Path | str,\n) -&gt; RenderCVDataModel:\n    \"\"\"Read the input file and return two instances of\n    [RenderCVDataModel][rendercv.data_models.RenderCVDataModel]. The first instance is\n    the data model with $\\\\LaTeX$ strings and the second instance is the data model with\n    markdown strings.\n\n    Args:\n        file_path_or_contents (str): The path to the input file or the contents of the\n            input file as a string.\n\n    Returns:\n        RenderCVDataModel: The data models with $\\\\LaTeX$ and markdown strings.\n    \"\"\"\n    if isinstance(file_path_or_contents, pathlib.Path):\n        # check if the file exists:\n        if not file_path_or_contents.exists():\n            raise FileNotFoundError(\n                f\"The input file [magenta]{file_path_or_contents}[/magenta] doesn't\"\n                \" exist!\"\n            )\n\n        # check the file extension:\n        accepted_extensions = [\".yaml\", \".yml\", \".json\", \".json5\"]\n        if file_path_or_contents.suffix not in accepted_extensions:\n            user_friendly_accepted_extensions = [\n                f\"[green]{ext}[/green]\" for ext in accepted_extensions\n            ]\n            user_friendly_accepted_extensions = \", \".join(\n                user_friendly_accepted_extensions\n            )\n            raise ValueError(\n                \"The input file should have one of the following extensions:\"\n                f\" {user_friendly_accepted_extensions}. The input file is\"\n                f\" [magenta]{file_path_or_contents}[/magenta].\"\n            )\n\n        file_content = file_path_or_contents.read_text(encoding=\"utf-8\")\n    else:\n        file_content = file_path_or_contents\n\n    input_as_dictionary: dict[str, Any] = ruamel.yaml.YAML().load(file_content)  # type: ignore\n\n    # validate the parsed dictionary by creating an instance of RenderCVDataModel:\n    rendercv_data_model = RenderCVDataModel(**input_as_dictionary)\n\n    return rendercv_data_model\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.get_a_sample_data_model","title":"<code>get_a_sample_data_model(name='John Doe', theme='classic')</code>","text":"<p>Return a sample data model for new users to start with.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>'John Doe'</code> )           \u2013            <p>The name of the person. Defaults to \"John Doe\".</p> </li> </ul> <p>Returns:     RenderCVDataModel: A sample data model.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def get_a_sample_data_model(\n    name: str = \"John Doe\", theme: str = \"classic\"\n) -&gt; RenderCVDataModel:\n    \"\"\"Return a sample data model for new users to start with.\n\n    Args:\n        name (str, optional): The name of the person. Defaults to \"John Doe\".\n    Returns:\n        RenderCVDataModel: A sample data model.\n    \"\"\"\n    # check if the theme is valid:\n    if theme not in available_themes:\n        available_themes_string = \", \".join(available_themes)\n        raise ValueError(\n            f\"The theme should be one of the following: {available_themes_string}!\"\n            f' The provided theme is \"{theme}\".'\n        )\n\n    name = name.encode().decode(\"unicode-escape\")\n\n    sections = {\n        \"welcome_to_rendercv!\": [\n            (\n                \"[RenderCV](https://github.com/sinaatalay/rendercv) is a LaTeX\"\n                \" CV/resume framework. It allows you to create a high-quality CV as\"\n                \" a PDF from a YAML file with **full Markdown syntax support** and\"\n                \" **complete control over the LaTeX code**.\"\n            ),\n            (\n                \"A substantial\"\n                \" part of the content is taken from\"\n                \" [here](https://www.careercup.com/resume), where a *clean and tidy CV*\"\n                \" pattern is proposed by **Gayle L. McDowell**.\"\n            ),\n        ],\n        \"quick_guide\": [\n            BulletEntry(\n                bullet=(\n                    \"Each section title is arbitrary, and each section contains a list\"\n                    \" of entries.\"\n                ),\n            ),\n            BulletEntry(\n                bullet=(\n                    \"There are seven different entry types: *BulletEntry*, *TextEntry*,\"\n                    \" *EducationEntry*, *ExperienceEntry*, *NormalEntry*,\"\n                    \" *PublicationEntry*, and *OneLineEntry*.\"\n                ),\n            ),\n            BulletEntry(\n                bullet=(\n                    \"Select a section title, pick an entry type, and start writing your\"\n                    \" section!\"\n                )\n            ),\n            BulletEntry(\n                bullet=(\n                    \"[Here](https://docs.rendercv.com/user_guide/), you can find a\"\n                    \" comprehensive user guide.\"\n                )\n            ),\n        ],\n        \"education\": [\n            EducationEntry(\n                institution=\"University of Pennsylvania\",\n                area=\"Computer Science\",\n                degree=\"BS\",\n                start_date=\"2000-09\",\n                end_date=\"2005-05\",\n                highlights=[\n                    \"GPA: 3.9/4.0 ([Transcript](https://example.com))\",\n                    (\n                        \"**Coursework:** Software Foundations, Computer\"\n                        \" Architecture, Algorithms, Artificial Intelligence, Comparison\"\n                        \" of Learning Algorithms, Computational Theory.\"\n                    ),\n                ],\n            ),\n        ],\n        \"experience\": [\n            ExperienceEntry(\n                company=\"Apple Computer\",\n                position=\"Software Engineer, Intern\",\n                start_date=\"2004-06\",\n                end_date=\"2004-08\",\n                location=\"CA, USA\",\n                highlights=[\n                    (\n                        \"Reduced time to render the user's buddy list by 75% by\"\n                        \" implementing a prediction algorithm.\"\n                    ),\n                    (\n                        \"Implemented iChat integration with OS X Spotlight Search by\"\n                        \" creating a tool that extracts metadata from saved chat\"\n                        \" transcripts and provides metadata to a system-wide search\"\n                        \" database.\"\n                    ),\n                    (\n                        \"Redesigned chat file format and implemented backward\"\n                        \" compatibility for search.\"\n                    ),\n                ],\n            ),\n            ExperienceEntry(\n                company=\"Microsoft Corporation\",\n                position=\"Lead Student Ambassador\",\n                start_date=\"2003-09\",\n                end_date=\"2005-04\",\n                location=\"WA, USA\",\n                highlights=[\n                    (\n                        \"Promoted to Lead Student Ambassador in the Fall of 2004,\"\n                        \" supervised 10 - 15 Student Ambassadors.\"\n                    ),\n                    (\n                        \"Created and taught a computer science course, CSE 099:\"\n                        \" Software Design and Development.\"\n                    ),\n                ],\n            ),\n            ExperienceEntry(\n                company=\"University of Pennsylvania\",\n                position=\"Head Teaching Assistant\",\n                start_date=\"2001-10\",\n                end_date=\"2005-05\",\n                location=\"PA, USA\",\n                highlights=[\n                    (\n                        \"Implemented a user interface for the VS open file switcher\"\n                        \" (ctrl-tab) and extended it to tool windows.\"\n                    ),\n                    (\n                        \"Created a service to provide gradient across VS and VS\"\n                        \" add-ins. Optimized service via caching.\"\n                    ),\n                    \"Programmer Productivity Research Center (Summers 2001, 2002)\",\n                    (\n                        \"Built app to compute the similarity of all methods in a code\"\n                        \" base, reduced time from $\\\\mathcal{O}(n^2)$ to\"\n                        \" $\\\\mathcal{O}(n \\\\log n)$. \"\n                    ),\n                    (\n                        \"Created a test case generation tool that creates random XML\"\n                        \" docs from XML Schema.\"\n                    ),\n                ],\n            ),\n            ExperienceEntry(\n                company=\"Microsoft Corporation\",\n                position=\"Software Design Engineer, Intern\",\n                start_date=\"2003-06\",\n                end_date=\"2003-08\",\n                location=\"WA, USA\",\n                highlights=[\n                    (\n                        \"Promoted to Lead Student Ambassador in the Fall of 2004,\"\n                        \" supervised 10 - 15 Student Ambassadors.\"\n                    ),\n                ],\n            ),\n        ],\n        \"publications\": [\n            PublicationEntry(\n                title=(\n                    \"Magneto-Thermal Thin Shell Approximation for 3D Finite Element\"\n                    \" Analysis of No-Insulation Coils\"\n                ),\n                authors=[\n                    \"Albert Smith\",\n                    f\"***{name}***\",\n                    \"Jane Derry\",\n                    \"Harry Tom\",\n                    \"Frodo Baggins\",\n                ],\n                date=\"2004-01\",\n                doi=\"10.1109/TASC.2023.3340648\",\n            )\n        ],\n        \"projects\": [\n            NormalEntry(\n                name=\"Multi-User Drawing Tool\",\n                date=\"2004\",\n                highlights=[\n                    (\n                        \"Developed an electronic classroom where multiple users can\"\n                        ' view and simultaneously draw on a \"chalkboard\" with each'\n                        \" person's edits synchronized.\"\n                    ),\n                    \"Used C++ and MFC.\",\n                ],\n            ),\n            NormalEntry(\n                name=\"Synchronized Calendar\",\n                start_date=\"2003\",\n                end_date=\"2004\",\n                highlights=[\n                    (\n                        \"Developed a desktop calendar with globally shared and\"\n                        \" synchronized calendars, allowing users to schedule meetings\"\n                        \" with other users.\"\n                    ),\n                    \"Used C#.NET, SQL, and XML.\",\n                ],\n            ),\n            NormalEntry(\n                name=\"Operating System\",\n                date=\"2002\",\n                highlights=[\n                    (\n                        \"Developed a UNIX-style OS with a scheduler, file system, text\"\n                        \" editor, and calculator.\"\n                    ),\n                    \"Used C.\",\n                ],\n            ),\n        ],\n        \"additional_experience_and_awards\": [\n            OneLineEntry(\n                label=\"Instructor (2003 - 2005)\",\n                details=\"Taught two full-credit Computer Science courses.\",\n            ),\n            OneLineEntry(\n                label=\"Third Prize, Senior Design Projects\",\n                details=(\n                    \"Awarded 3rd prize for a synchronized calendar project out of 100\"\n                    \" projects.\"\n                ),\n            ),\n        ],\n        \"technologies\": [\n            OneLineEntry(\n                label=\"Languages\",\n                details=\"C++, C, Java, Objective-C, C#.NET, SQL, JavaScript\",\n            ),\n            OneLineEntry(\n                label=\"Software\",\n                details=(\n                    \"Visual Studio, Microsoft SQL Server, Eclipse, XCode, Interface\"\n                    \" Builder\"\n                ),\n            ),\n        ],\n    }\n    cv = CurriculumVitae(\n        name=name,\n        location=\"Your Location\",\n        email=\"youremail@yourdomain.com\",\n        phone=\"+905419999999\",  # type: ignore\n        website=\"https://yourwebsite.com\",  # type: ignore\n        social_networks=[\n            SocialNetwork(network=\"LinkedIn\", username=\"yourusername\"),\n            SocialNetwork(network=\"GitHub\", username=\"yourusername\"),\n        ],\n        sections=sections,  # type: ignore\n    )\n\n    if theme == \"classic\":\n        design = ClassicThemeOptions(theme=\"classic\", show_timespan_in=[\"Experience\"])\n    else:\n        design = rendercv_design_validator.validate_python({\"theme\": theme})  # type: ignore\n\n    return RenderCVDataModel(cv=cv, design=design)\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.dictionary_to_yaml","title":"<code>dictionary_to_yaml(dictionary)</code>","text":"<p>Converts a dictionary to a YAML string.</p> <p>Parameters:</p> <ul> <li> <code>dictionary</code>               (<code>dict[str, Any]</code>)           \u2013            <p>The dictionary to be converted to YAML.</p> </li> </ul> <p>Returns:     str: The YAML string.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def dictionary_to_yaml(dictionary: dict[str, Any]):\n    \"\"\"Converts a dictionary to a YAML string.\n\n    Args:\n        dictionary (dict[str, Any]): The dictionary to be converted to YAML.\n    Returns:\n        str: The YAML string.\n    \"\"\"\n    yaml_object = ruamel.yaml.YAML()\n    yaml_object.encoding = \"utf-8\"\n    yaml_object.width = 60\n    yaml_object.indent(mapping=2, sequence=4, offset=2)\n    with io.StringIO() as string_stream:\n        yaml_object.dump(dictionary, string_stream)\n        yaml_string = string_stream.getvalue()\n    return yaml_string\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.create_a_sample_yaml_input_file","title":"<code>create_a_sample_yaml_input_file(input_file_path=None, name='John Doe', theme='classic')</code>","text":"<p>Create a sample YAML input file and return it as a string. If the input file path is provided, then also save the contents to the file.</p> <p>Parameters:</p> <ul> <li> <code>input_file_path</code>               (<code>Path</code>, default:                   <code>None</code> )           \u2013            <p>The path to save the input file. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>'John Doe'</code> )           \u2013            <p>The name of the person. Defaults to \"John Doe\".</p> </li> <li> <code>theme</code>               (<code>str</code>, default:                   <code>'classic'</code> )           \u2013            <p>The theme of the CV. Defaults to \"classic\".</p> </li> </ul> <p>Returns:     str: The sample YAML input file as a string.</p> Source code in <code>rendercv/data_models.py</code> <pre><code>def create_a_sample_yaml_input_file(\n    input_file_path: Optional[pathlib.Path] = None,\n    name: str = \"John Doe\",\n    theme: str = \"classic\",\n) -&gt; str:\n    \"\"\"Create a sample YAML input file and return it as a string. If the input file path\n    is provided, then also save the contents to the file.\n\n    Args:\n        input_file_path (pathlib.Path, optional): The path to save the input file.\n            Defaults to None.\n        name (str, optional): The name of the person. Defaults to \"John Doe\".\n        theme (str, optional): The theme of the CV. Defaults to \"classic\".\n    Returns:\n        str: The sample YAML input file as a string.\n    \"\"\"\n    data_model = get_a_sample_data_model(name=name, theme=theme)\n\n    # Instead of getting the dictionary with data_model.model_dump() directly, we\n    # convert it to JSON and then to a dictionary. Because the YAML library we are\n    # using sometimes has problems with the dictionary returned by model_dump().\n\n    # We exclude \"cv.sections\" because the data model automatically generates them.\n    # The user's \"cv.sections\" input is actually \"cv.sections_input\" in the data\n    # model. It is shown as \"cv.sections\" in the YAML file because an alias is being\n    # used. If\"cv.sections\" were not excluded, the automatically generated\n    # \"cv.sections\" would overwrite the \"cv.sections_input\". \"cv.sections\" are\n    # automatically generated from \"cv.sections_input\" to make the templating\n    # process easier. \"cv.sections_input\" exists for the convenience of the user.\n    data_model_as_json = data_model.model_dump_json(\n        exclude_none=True, by_alias=True, exclude={\"cv\": {\"sections\"}}\n    )\n    data_model_as_dictionary = json.loads(data_model_as_json)\n\n    yaml_string = dictionary_to_yaml(data_model_as_dictionary)\n\n    if input_file_path is not None:\n        input_file_path.write_text(yaml_string, encoding=\"utf-8\")\n\n    return yaml_string\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.generate_json_schema","title":"<code>generate_json_schema()</code>","text":"<p>Generate the JSON schema of RenderCV.</p> <p>JSON schema is generated for the users to make it easier for them to write the input file. The JSON Schema of RenderCV is saved in the <code>docs</code> directory of the repository and distributed to the users with the JSON Schema Store.</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict[str, Any]</code> )          \u2013            <p>The JSON schema of RenderCV.</p> </li> </ul> Source code in <code>rendercv/data_models.py</code> <pre><code>def generate_json_schema() -&gt; dict[str, Any]:\n    \"\"\"Generate the JSON schema of RenderCV.\n\n    JSON schema is generated for the users to make it easier for them to write the input\n    file. The JSON Schema of RenderCV is saved in the `docs` directory of the repository\n    and distributed to the users with the\n    [JSON Schema Store](https://www.schemastore.org/).\n\n    Returns:\n        dict: The JSON schema of RenderCV.\n    \"\"\"\n\n    class RenderCVSchemaGenerator(pydantic.json_schema.GenerateJsonSchema):\n        def generate(self, schema, mode=\"validation\"):  # type: ignore\n            json_schema = super().generate(schema, mode=mode)\n\n            # Basic information about the schema:\n            json_schema[\"title\"] = \"RenderCV\"\n            json_schema[\"description\"] = \"RenderCV data model.\"\n            json_schema[\"$id\"] = (\n                \"https://raw.githubusercontent.com/sinaatalay/rendercv/main/schema.json\"\n            )\n            json_schema[\"$schema\"] = \"http://json-schema.org/draft-07/schema#\"\n\n            # Loop through $defs and remove docstring descriptions and fix optional\n            # fields\n            for object_name, value in json_schema[\"$defs\"].items():\n                # Don't allow additional properties\n                value[\"additionalProperties\"] = False\n\n                # If a type is optional, then Pydantic sets the type to a list of two\n                # types, one of which is null. The null type can be removed since we\n                # already have the required field. Moreover, we would like to warn\n                # users if they provide null values. They can remove the fields if they\n                # don't want to provide them.\n                null_type_dict = {}\n                null_type_dict[\"type\"] = \"null\"\n                for field_name, field in value[\"properties\"].items():\n                    if \"anyOf\" in field:\n                        if (\n                            len(field[\"anyOf\"]) == 2\n                            and null_type_dict in field[\"anyOf\"]\n                        ):\n                            field[\"oneOf\"] = [field[\"anyOf\"][0]]\n                            del field[\"anyOf\"]\n\n                            # for sections field of CurriculumVitae:\n                            if \"additionalProperties\" in field[\"oneOf\"][0]:\n                                field[\"oneOf\"][0][\"additionalProperties\"][\"oneOf\"] = (\n                                    field[\"oneOf\"][0][\"additionalProperties\"][\"anyOf\"]\n                                )\n                                del field[\"oneOf\"][0][\"additionalProperties\"][\"anyOf\"]\n\n                        else:\n                            field[\"oneOf\"] = field[\"anyOf\"]\n                            del field[\"anyOf\"]\n\n            return json_schema\n\n    schema = RenderCVDataModel.model_json_schema(\n        schema_generator=RenderCVSchemaGenerator\n    )\n\n    return schema\n</code></pre>"},{"location":"reference/data_models/#rendercv.data_models.generate_json_schema_file","title":"<code>generate_json_schema_file(json_schema_path)</code>","text":"<p>Generate the JSON schema of RenderCV and save it to a file.</p> <p>Parameters:</p> <ul> <li> <code>json_schema_path</code>               (<code>Path</code>)           \u2013            <p>The path to save the JSON schema.</p> </li> </ul> Source code in <code>rendercv/data_models.py</code> <pre><code>def generate_json_schema_file(json_schema_path: pathlib.Path):\n    \"\"\"Generate the JSON schema of RenderCV and save it to a file.\n\n    Args:\n        json_schema_path (pathlib.Path): The path to save the JSON schema.\n    \"\"\"\n    schema = generate_json_schema()\n    schema_json = json.dumps(schema, indent=2, ensure_ascii=False)\n    json_schema_path.write_text(schema_json, encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/renderer/","title":"Renderer","text":"<p>This module contains functions and classes for generating CVs as $\\LaTeX$ files, PDF files, Markdown files, HTML files, and PNG files from the data model.</p> <p>The $\\LaTeX$ and Markdown files are generated with Jinja2 templates. Then, the $\\LaTeX$ file is rendered into a PDF with TinyTeX, a $\\LaTeX$ distribution. The markdown file is rendered into an HTML file with markdown package. The PDF files are rendered into PNG files with PyMuPDF/fitz package.</p>"},{"location":"reference/renderer/#rendercv.renderer.TemplatedFile","title":"<code>TemplatedFile(data_model, environment)</code>","text":"<p>This class is a base class for <code>LaTeXFile</code> and <code>MarkdownFile</code> classes. It contains the common methods and attributes for both classes. These classes are used to generate the $\\LaTeX$ and Markdown files with the data model and Jinja2 templates.</p> <p>Parameters:</p> <ul> <li> <code>data_model</code>               (<code>RenderCVDataModel</code>)           \u2013            <p>The data model.</p> </li> <li> <code>environment</code>               (<code>Environment</code>)           \u2013            <p>The Jinja2 environment.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def __init__(\n    self,\n    data_model: dm.RenderCVDataModel,\n    environment: jinja2.Environment,\n):\n    self.cv = data_model.cv\n    self.design = data_model.design\n    self.environment = environment\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.TemplatedFile.template","title":"<code>template(theme_name, template_name, extension, entry=None, **kwargs)</code>","text":"<p>Template one of the files in the <code>themes</code> directory.</p> <p>Parameters:</p> <ul> <li> <code>template_name</code>               (<code>str</code>)           \u2013            <p>The name of the template file.</p> </li> <li> <code>entry</code>               (<code>Optional[Entry]</code>, default:                   <code>None</code> )           \u2013            <p>The title of the section.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The templated file.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def template(\n    self,\n    theme_name: str,\n    template_name: str,\n    extension: str,\n    entry: Optional[dm.Entry] = None,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Template one of the files in the `themes` directory.\n\n    Args:\n        template_name (str): The name of the template file.\n        entry (Optional[dm.Entry]): The title of the section.\n\n    Returns:\n        str: The templated file.\n    \"\"\"\n    template = self.environment.get_template(\n        f\"{theme_name}/{template_name}.j2.{extension}\"\n    )\n\n    # Loop through the entry attributes and make them \"\" if they are None:\n    # This is necessary because otherwise they will be templated as \"None\" since\n    # it's the string representation of None.\n\n    # Only don't touch the date fields, because only date_string is called and\n    # setting dates to \"\" will cause problems.\n    fields_to_ignore = [\"start_date\", \"end_date\", \"date\"]\n\n    if entry is not None and not isinstance(entry, str):\n        entry_dictionary = entry.model_dump()\n        for key, value in entry_dictionary.items():\n            if value is None and key not in fields_to_ignore:\n                entry.__setattr__(key, \"\")\n\n    # The arguments of the template can be used in the template file:\n    result = template.render(\n        cv=self.cv,\n        design=self.design,\n        entry=entry,\n        today=Date.today().strftime(\"%B %Y\"),\n        **kwargs,\n    )\n\n    return result\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.TemplatedFile.get_full_code","title":"<code>get_full_code(main_template_name, **kwargs)</code>","text":"<p>Combine all the templates to get the full code of the file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def get_full_code(self, main_template_name: str, **kwargs) -&gt; str:\n    \"\"\"Combine all the templates to get the full code of the file.\"\"\"\n    main_template = self.environment.get_template(main_template_name)\n    latex_code = main_template.render(\n        **kwargs,\n    )\n    return latex_code\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile","title":"<code>LaTeXFile(data_model, environment)</code>","text":"<p>               Bases: <code>TemplatedFile</code></p> <p>This class represents a $\\LaTeX$ file. It generates the $\\LaTeX$ code with the data model and Jinja2 templates. It inherits from the <code>TemplatedFile</code> class.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def __init__(\n    self,\n    data_model: dm.RenderCVDataModel,\n    environment: jinja2.Environment,\n):\n    latex_file_data_model = copy.deepcopy(data_model)\n    transformed_sections = transform_markdown_sections_to_latex_sections(\n        latex_file_data_model.cv.sections_input\n    )\n    latex_file_data_model.cv.sections_input = transformed_sections\n    super().__init__(latex_file_data_model, environment)\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile.render_templates","title":"<code>render_templates()</code>","text":"<p>Render and return all the templates for the $\\LaTeX$ file.</p> <p>Returns:</p> <ul> <li> <code>tuple[str, str, list[tuple[str, list[str], str]]]</code>           \u2013            <p>Tuple[str, str, List[Tuple[str, List[str], str]]]: The preamble, header, and sections of the $\\LaTeX$ file.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def render_templates(self) -&gt; tuple[str, str, list[tuple[str, list[str], str]]]:\n    \"\"\"Render and return all the templates for the $\\\\LaTeX$ file.\n\n    Returns:\n        Tuple[str, str, List[Tuple[str, List[str], str]]]: The preamble, header, and\n            sections of the $\\\\LaTeX$ file.\n    \"\"\"\n    # Template the preamble, header, and sections:\n    preamble = self.template(\"Preamble\")\n    header = self.template(\"Header\")\n    sections: list[tuple[str, list[str], str]] = []\n    for section in self.cv.sections:\n        section_beginning = self.template(\n            \"SectionBeginning\",\n            section_title=section.title,\n            entry_type=section.entry_type,\n        )\n        entries: list[str] = []\n        for i, entry in enumerate(section.entries):\n            is_first_entry = i == 0\n\n            entries.append(\n                self.template(\n                    section.entry_type,\n                    entry=entry,\n                    section_title=section.title,\n                    entry_type=section.entry_type,\n                    is_first_entry=is_first_entry,\n                )\n            )\n        section_ending = self.template(\n            \"SectionEnding\",\n            section_title=section.title,\n            entry_type=section.entry_type,\n        )\n        sections.append((section_beginning, entries, section_ending))\n\n    return preamble, header, sections\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile.template","title":"<code>template(template_name, entry=None, **kwargs)</code>","text":"<p>Template one of the files in the <code>themes</code> directory.</p> <p>Parameters:</p> <ul> <li> <code>template_name</code>               (<code>str</code>)           \u2013            <p>The name of the template file.</p> </li> <li> <code>entry</code>               (<code>Optional[Entry]</code>, default:                   <code>None</code> )           \u2013            <p>The data model of the entry.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The templated file.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def template(\n    self,\n    template_name: str,\n    entry: Optional[dm.Entry] = None,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Template one of the files in the `themes` directory.\n\n    Args:\n        template_name (str): The name of the template file.\n        entry (Optional[dm.Entry]): The data model of the entry.\n\n    Returns:\n        str: The templated file.\n    \"\"\"\n    result = super().template(\n        self.design.theme,\n        template_name,\n        \"tex\",\n        entry,\n        **kwargs,\n    )\n\n    result = self.revert_nested_latex_style_commands(result)\n\n    return result\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile.revert_nested_latex_style_commands","title":"<code>revert_nested_latex_style_commands(latex_string)</code>  <code>classmethod</code>","text":"<p>Revert the nested $\\LaTeX$ style commands to allow users to unbold or unitalicize a bold or italicized text.</p> <p>Parameters:</p> <ul> <li> <code>latex_string</code>               (<code>str</code>)           \u2013            <p>The string to revert the nested $\\LaTeX$ style commands.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The string with the reverted nested $\\LaTeX$ style commands.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>@classmethod\ndef revert_nested_latex_style_commands(cls, latex_string: str) -&gt; str:\n    \"\"\"Revert the nested $\\\\LaTeX$ style commands to allow users to unbold or\n    unitalicize a bold or italicized text.\n\n    Args:\n        latex_string (str): The string to revert the nested $\\\\LaTeX$ style\n            commands.\n\n    Returns:\n        str: The string with the reverted nested $\\\\LaTeX$ style commands.\n    \"\"\"\n    # If there is nested \\textbf, \\textit, or \\underline commands, replace the inner\n    # ones with \\textnormal:\n    nested_commands_to_look_for = [\n        \"textbf\",\n        \"textit\",\n        \"underline\",\n    ]\n\n    for command in nested_commands_to_look_for:\n        nested_commands = True\n        while nested_commands:\n            # replace all the inner commands with \\textnormal until there are no\n            # nested commands left:\n\n            # find the first nested command:\n            nested_commands = re.findall(\n                rf\"\\\\{command}{{[^}}]*?(\\\\{command}{{.*?}})\", latex_string\n            )\n\n            # replace the nested command with \\textnormal:\n            for nested_command in nested_commands:\n                new_command = nested_command.replace(command, \"textnormal\")\n                latex_string = latex_string.replace(nested_command, new_command)\n\n    return latex_string\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile.get_latex_code","title":"<code>get_latex_code()</code>","text":"<p>Get the $\\LaTeX$ code of the file.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The $\\LaTeX$ code.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def get_latex_code(self) -&gt; str:\n    \"\"\"Get the $\\\\LaTeX$ code of the file.\n\n    Returns:\n        str: The $\\\\LaTeX$ code.\n    \"\"\"\n    preamble, header, sections = self.render_templates()\n    latex_code: str = self.get_full_code(\n        \"main.j2.tex\",\n        preamble=preamble,\n        header=header,\n        sections=sections,\n    )\n    return latex_code\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.LaTeXFile.generate_latex_file","title":"<code>generate_latex_file(file_path)</code>","text":"<p>Write the $\\LaTeX$ code to a file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def generate_latex_file(self, file_path: pathlib.Path):\n    \"\"\"Write the $\\\\LaTeX$ code to a file.\"\"\"\n    file_path.write_text(self.get_latex_code(), encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.MarkdownFile","title":"<code>MarkdownFile(data_model, environment)</code>","text":"<p>               Bases: <code>TemplatedFile</code></p> <p>This class represents a Markdown file. It generates the Markdown code with the data model and Jinja2 templates. It inherits from the <code>TemplatedFile</code> class. Markdown files are generated to produce an HTML which can be copy-pasted to Grammarly for proofreading.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def __init__(\n    self,\n    data_model: dm.RenderCVDataModel,\n    environment: jinja2.Environment,\n):\n    self.cv = data_model.cv\n    self.design = data_model.design\n    self.environment = environment\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.MarkdownFile.render_templates","title":"<code>render_templates()</code>","text":"<p>Render and return all the templates for the Markdown file.</p> <p>Returns:</p> <ul> <li> <code>tuple[str, list[tuple[str, list[str]]]]</code>           \u2013            <p>tuple[str, List[Tuple[str, List[str]]]]: The header and sections of the Markdown file.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def render_templates(self) -&gt; tuple[str, list[tuple[str, list[str]]]]:\n    \"\"\"Render and return all the templates for the Markdown file.\n\n    Returns:\n        tuple[str, List[Tuple[str, List[str]]]]: The header and sections of the\n            Markdown file.\n    \"\"\"\n    # Template the header and sections:\n    header = self.template(\"Header\")\n    sections: list[tuple[str, list[str]]] = []\n    for section in self.cv.sections:\n        section_beginning = self.template(\n            \"SectionBeginning\",\n            section_title=section.title,\n            entry_type=section.entry_type,\n        )\n        entries: list[str] = []\n        for i, entry in enumerate(section.entries):\n            if i == 0:\n                is_first_entry = True\n            else:\n                is_first_entry = False\n            entries.append(\n                self.template(\n                    section.entry_type,\n                    entry=entry,\n                    section_title=section.title,\n                    entry_type=section.entry_type,\n                    is_first_entry=is_first_entry,\n                )\n            )\n        sections.append((section_beginning, entries))\n\n    result: tuple[str, list[tuple[str, list[str]]]] = (header, sections)\n    return result\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.MarkdownFile.template","title":"<code>template(template_name, entry=None, **kwargs)</code>","text":"<p>Template one of the files in the <code>themes</code> directory.</p> <p>Parameters:</p> <ul> <li> <code>template_name</code>               (<code>str</code>)           \u2013            <p>The name of the template file.</p> </li> <li> <code>entry</code>               (<code>Optional[Entry]</code>, default:                   <code>None</code> )           \u2013            <p>The data model of the entry.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The templated file.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def template(\n    self,\n    template_name: str,\n    entry: Optional[dm.Entry] = None,\n    **kwargs,\n) -&gt; str:\n    \"\"\"Template one of the files in the `themes` directory.\n\n    Args:\n        template_name (str): The name of the template file.\n        entry (Optional[dm.Entry]): The data model of the entry.\n\n    Returns:\n        str: The templated file.\n    \"\"\"\n    result = super().template(\n        \"markdown\",\n        template_name,\n        \"md\",\n        entry,\n        **kwargs,\n    )\n    return result\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.MarkdownFile.get_markdown_code","title":"<code>get_markdown_code()</code>","text":"<p>Get the Markdown code of the file.</p> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The Markdown code.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def get_markdown_code(self) -&gt; str:\n    \"\"\"Get the Markdown code of the file.\n\n    Returns:\n        str: The Markdown code.\n    \"\"\"\n    header, sections = self.render_templates()\n    markdown_code: str = self.get_full_code(\n        \"main.j2.md\",\n        header=header,\n        sections=sections,\n    )\n    return markdown_code\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.MarkdownFile.generate_markdown_file","title":"<code>generate_markdown_file(file_path)</code>","text":"<p>Write the Markdown code to a file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def generate_markdown_file(self, file_path: pathlib.Path):\n    \"\"\"Write the Markdown code to a file.\"\"\"\n    file_path.write_text(self.get_markdown_code(), encoding=\"utf-8\")\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.escape_latex_characters","title":"<code>escape_latex_characters(latex_string, strict=True)</code>","text":"<p>Escape $\\LaTeX$ characters in a string.</p> <p>This function is called during the reading of the input file. Before the validation process, each input field's special $\\LaTeX$ characters are escaped. It is also can be used as a Jinja2 filter in templates.</p> Example <p><pre><code>escape_latex_characters(\"This is a # string.\")\n</code></pre> will return: <code>\"This is a \\# string.\"</code></p> <p>Parameters:</p> <ul> <li> <code>latex_string</code>               (<code>str</code>)           \u2013            <p>The string to escape.</p> </li> <li> <code>strict</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to escape all the special $\\LaTeX$ characters or not. If you want to allow math input, set it to False.</p> </li> </ul> <p>Returns:     str: The escaped string.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def escape_latex_characters(latex_string: str, strict: bool = True) -&gt; str:\n    \"\"\"Escape $\\\\LaTeX$ characters in a string.\n\n    This function is called during the reading of the input file. Before the validation\n    process, each input field's special $\\\\LaTeX$ characters are escaped. It is also can\n    be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        escape_latex_characters(\"This is a # string.\")\n        ```\n        will return:\n        `#!python \"This is a \\\\# string.\"`\n\n    Args:\n        latex_string (str): The string to escape.\n        strict (bool): Whether to escape all the special $\\\\LaTeX$ characters or not. If\n            you want to allow math input, set it to False.\n    Returns:\n        str: The escaped string.\n    \"\"\"\n\n    # Dictionary of escape characters:\n    escape_characters = {\n        \"#\": \"\\\\#\",\n        \"%\": \"\\\\%\",\n        \"&amp;\": \"\\\\&amp;\",\n        \"~\": \"\\\\textasciitilde{}\",\n    }\n\n    if strict:\n        # To allow math input, users can use this function with strict = False\n        escape_characters[\"$\"] = \"\\\\$\"\n        escape_characters[\"_\"] = \"\\\\_\"\n        escape_characters[\"^\"] = \"\\\\textasciicircum{}\"\n\n    # Don't escape links as hyperref package will do it automatically:\n    # Find all the links in the sentence:\n    links = re.findall(r\"\\[.*?\\]\\(.*?\\)\", latex_string)\n\n    # Replace the links with a placeholder:\n    for i, link in enumerate(links):\n        latex_string = latex_string.replace(link, f\"!!-link{i}-!!\")\n\n    # Loop through the letters of the sentence and if you find an escape character,\n    # replace it with its LaTeX equivalent:\n    translation_map = str.maketrans(escape_characters)\n    latex_string = latex_string.translate(translation_map)\n\n    # Replace the links with the original links:\n    for i, link in enumerate(links):\n        latex_string = latex_string.replace(f\"!!-link{i}-!!\", link)\n\n    return latex_string\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.markdown_to_latex","title":"<code>markdown_to_latex(markdown_string)</code>","text":"<p>Convert a markdown string to $\\LaTeX$.</p> <p>This function is called during the reading of the input file. Before the validation process, each input field is converted from markdown to $\\LaTeX$.</p> Example <pre><code>markdown_to_latex(\"This is a **bold** text with an [*italic link*](https://google.com).\")\n</code></pre> <p>will return:</p> <p><code>\"This is a \\textbf{bold} text with a \\href{https://google.com}{\\textit{link}}.\"</code></p> <p>Parameters:</p> <ul> <li> <code>markdown_string</code>               (<code>str</code>)           \u2013            <p>The markdown string to convert.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code> (              <code>str</code> )          \u2013            <p>The $\\LaTeX$ string.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def markdown_to_latex(markdown_string: str) -&gt; str:\n    \"\"\"Convert a markdown string to $\\\\LaTeX$.\n\n    This function is called during the reading of the input file. Before the validation\n    process, each input field is converted from markdown to $\\\\LaTeX$.\n\n    Example:\n        ```python\n        markdown_to_latex(\"This is a **bold** text with an [*italic link*](https://google.com).\")\n        ```\n\n        will return:\n\n        `#!python \"This is a \\\\textbf{bold} text with a \\\\href{https://google.com}{\\\\textit{link}}.\"`\n\n    Args:\n        markdown_string (str): The markdown string to convert.\n\n    Returns:\n        str: The $\\\\LaTeX$ string.\n    \"\"\"\n    # convert links\n    links = re.findall(r\"\\[([^\\]\\[]*)\\]\\((.*?)\\)\", markdown_string)\n    if links is not None:\n        for link in links:\n            link_text = link[0]\n            link_url = link[1]\n\n            old_link_string = f\"[{link_text}]({link_url})\"\n            new_link_string = \"\\\\href{\" + link_url + \"}{\" + link_text + \"}\"\n\n            markdown_string = markdown_string.replace(old_link_string, new_link_string)\n\n    # convert bold\n    bolds = re.findall(r\"\\*\\*(.+?)\\*\\*\", markdown_string)\n    if bolds is not None:\n        for bold_text in bolds:\n            old_bold_text = f\"**{bold_text}**\"\n            new_bold_text = \"\\\\textbf{\" + bold_text + \"}\"\n\n            markdown_string = markdown_string.replace(old_bold_text, new_bold_text)\n\n    # convert italic\n    italics = re.findall(r\"\\*(.+?)\\*\", markdown_string)\n    if italics is not None:\n        for italic_text in italics:\n            old_italic_text = f\"*{italic_text}*\"\n            new_italic_text = \"\\\\textit{\" + italic_text + \"}\"\n\n            markdown_string = markdown_string.replace(old_italic_text, new_italic_text)\n\n    # convert code\n    # not supported by rendercv currently\n    # codes = re.findall(r\"`([^`]*)`\", markdown_string)\n    # if codes is not None:\n    #     for code_text in codes:\n    #         old_code_text = f\"`{code_text}`\"\n    #         new_code_text = \"\\\\texttt{\" + code_text + \"}\"\n\n    #         markdown_string = markdown_string.replace(old_code_text, new_code_text)\n\n    latex_string = markdown_string\n\n    return latex_string\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.transform_markdown_sections_to_latex_sections","title":"<code>transform_markdown_sections_to_latex_sections(sections)</code>","text":"<p>Recursively loop through sections and convert all the markdown strings (user input is in markdown format) to $\\LaTeX$ strings. Also, escape special $\\LaTeX$ characters.</p> <p>Parameters:</p> <ul> <li> <code>sections</code>               (<code>Optional[dict[str, SectionInput]]</code>)           \u2013            <p>Sections with markdown strings.</p> </li> </ul> <p>Returns:     Optional[dict[str, dm.SectionInput]]: Sections with $\\LaTeX$ strings.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def transform_markdown_sections_to_latex_sections(\n    sections: Optional[dict[str, dm.SectionInput]],\n) -&gt; Optional[dict[str, dm.SectionInput]]:\n    \"\"\"\n    Recursively loop through sections and convert all the markdown strings (user input\n    is in markdown format) to $\\\\LaTeX$ strings. Also, escape special $\\\\LaTeX$\n    characters.\n\n    Args:\n        sections (Optional[dict[str, dm.SectionInput]]): Sections with markdown strings.\n    Returns:\n        Optional[dict[str, dm.SectionInput]]: Sections with $\\\\LaTeX$ strings.\n    \"\"\"\n    if sections is None:\n        return None\n\n    for key, value in sections.items():\n        # loop through the list and apply markdown_to_latex and escape_latex_characters\n        # to each item:\n        transformed_list = []\n        for entry in value:\n            if isinstance(entry, str):\n                # Then it means it's a TextEntry.\n                result = markdown_to_latex(escape_latex_characters(entry, strict=False))\n                transformed_list.append(result)\n            else:\n                # Then it means it's one of the other entries.\n                entry_as_dict = entry.model_dump()\n                for entry_key, value in entry_as_dict.items():\n                    if isinstance(value, str):\n                        result = markdown_to_latex(\n                            escape_latex_characters(value, strict=False)\n                        )\n                        setattr(entry, entry_key, result)\n                    elif isinstance(value, list):\n                        for j, item in enumerate(value):\n                            if isinstance(item, str):\n                                value[j] = markdown_to_latex(\n                                    escape_latex_characters(item, strict=False)\n                                )\n                        setattr(entry, entry_key, value)\n                transformed_list.append(entry)\n\n        sections[key] = transformed_list\n\n    return sections\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.replace_placeholders_with_actual_values","title":"<code>replace_placeholders_with_actual_values(text, placeholders)</code>","text":"<p>Replace the placeholders in a string with actual values.</p> <p>This function can be used as a Jinja2 filter in templates.</p> <p>Parameters:</p> <ul> <li> <code>text</code>               (<code>str</code>)           \u2013            <p>The text with placeholders.</p> </li> <li> <code>placeholders</code>               (<code>dict[str, str]</code>)           \u2013            <p>The placeholders and their values.</p> </li> </ul> <p>Returns:     str: The string with actual values.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def replace_placeholders_with_actual_values(\n    text: str, placeholders: dict[str, Optional[str]]\n) -&gt; str:\n    \"\"\"Replace the placeholders in a string with actual values.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Args:\n        text (str): The text with placeholders.\n        placeholders (dict[str, str]): The placeholders and their values.\n    Returns:\n        str: The string with actual values.\n    \"\"\"\n    for placeholder, value in placeholders.items():\n        text = text.replace(placeholder, str(value))\n\n    return text\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.make_matched_part_something","title":"<code>make_matched_part_something(value, something, match_str=None)</code>","text":"<p>Make the matched parts of the string something. If the match_str is None, the whole string will be made something.</p> Warning <p>This function shouldn't be used directly. Use make_matched_part_bold, make_matched_part_underlined, make_matched_part_italic, or make_matched_part_non_line_breakable instead.</p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string to make something.</p> </li> <li> <code>something</code>               (<code>str</code>)           \u2013            <p>The $\\LaTeX$ command to use.</p> </li> <li> <code>match_str</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The string to match.</p> </li> </ul> <p>Returns:     str: The string with the matched part something.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def make_matched_part_something(\n    value: str, something: str, match_str: Optional[str] = None\n) -&gt; str:\n    \"\"\"Make the matched parts of the string something. If the match_str is None, the\n    whole string will be made something.\n\n    Warning:\n        This function shouldn't be used directly. Use\n        [make_matched_part_bold][rendercv.renderer.make_matched_part_bold],\n        [make_matched_part_underlined][rendercv.renderer.make_matched_part_underlined],\n        [make_matched_part_italic][rendercv.renderer.make_matched_part_italic],\n        or\n        [make_matched_part_non_line_breakable][rendercv.renderer.make_matched_part_non_line_breakable]\n        instead.\n\n    Args:\n        value (str): The string to make something.\n        something (str): The $\\\\LaTeX$ command to use.\n        match_str (str): The string to match.\n    Returns:\n        str: The string with the matched part something.\n    \"\"\"\n    if match_str is None:\n        value = f\"\\\\{something}{{{value}}}\"\n    elif match_str in value and match_str != \"\":\n        value = value.replace(match_str, f\"\\\\{something}{{{match_str}}}\")\n\n    return value\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.make_matched_part_bold","title":"<code>make_matched_part_bold(value, match_str=None)</code>","text":"<p>Make the matched parts of the string bold. If the match_str is None, the whole string will be made bold.</p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>make_it_bold(\"Hello World!\", \"Hello\")\n</code></pre> <p>will return:</p> <p><code>\"\\textbf{Hello} World!\"</code></p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string to make bold.</p> </li> <li> <code>match_str</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The string to match.</p> </li> </ul> <p>Returns:     str: The string with the matched part bold.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def make_matched_part_bold(value: str, match_str: Optional[str] = None) -&gt; str:\n    \"\"\"Make the matched parts of the string bold. If the match_str is None, the whole\n    string will be made bold.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        make_it_bold(\"Hello World!\", \"Hello\")\n        ```\n\n        will return:\n\n        `#!python \"\\\\textbf{Hello} World!\"`\n\n    Args:\n        value (str): The string to make bold.\n        match_str (str): The string to match.\n    Returns:\n        str: The string with the matched part bold.\n    \"\"\"\n    return make_matched_part_something(value, \"textbf\", match_str)\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.make_matched_part_underlined","title":"<code>make_matched_part_underlined(value, match_str=None)</code>","text":"<p>Make the matched parts of the string underlined. If the match_str is None, the whole string will be made underlined.</p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>make_it_underlined(\"Hello World!\", \"Hello\")\n</code></pre> <p>will return:</p> <p><code>\"\\underline{Hello} World!\"</code></p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string to make underlined.</p> </li> <li> <code>match_str</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The string to match.</p> </li> </ul> <p>Returns:     str: The string with the matched part underlined.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def make_matched_part_underlined(value: str, match_str: Optional[str] = None) -&gt; str:\n    \"\"\"Make the matched parts of the string underlined. If the match_str is None, the\n    whole string will be made underlined.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        make_it_underlined(\"Hello World!\", \"Hello\")\n        ```\n\n        will return:\n\n        `#!python \"\\\\underline{Hello} World!\"`\n\n    Args:\n        value (str): The string to make underlined.\n        match_str (str): The string to match.\n    Returns:\n        str: The string with the matched part underlined.\n    \"\"\"\n    return make_matched_part_something(value, \"underline\", match_str)\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.make_matched_part_italic","title":"<code>make_matched_part_italic(value, match_str=None)</code>","text":"<p>Make the matched parts of the string italic. If the match_str is None, the whole string will be made italic.</p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>make_it_italic(\"Hello World!\", \"Hello\")\n</code></pre> <p>will return:</p> <p><code>\"\\textit{Hello} World!\"</code></p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string to make italic.</p> </li> <li> <code>match_str</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The string to match.</p> </li> </ul> <p>Returns:     str: The string with the matched part italic.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def make_matched_part_italic(value: str, match_str: Optional[str] = None) -&gt; str:\n    \"\"\"Make the matched parts of the string italic. If the match_str is None, the whole\n    string will be made italic.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        make_it_italic(\"Hello World!\", \"Hello\")\n        ```\n\n        will return:\n\n        `#!python \"\\\\textit{Hello} World!\"`\n\n    Args:\n        value (str): The string to make italic.\n        match_str (str): The string to match.\n    Returns:\n        str: The string with the matched part italic.\n    \"\"\"\n    return make_matched_part_something(value, \"textit\", match_str)\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.make_matched_part_non_line_breakable","title":"<code>make_matched_part_non_line_breakable(value, match_str=None)</code>","text":"<p>Make the matched parts of the string non line breakable. If the match_str is None, the whole string will be made nonbreakable.</p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>make_it_nolinebreak(\"Hello World!\", \"Hello\")\n</code></pre> <p>will return:</p> <p><code>\"\\mbox{Hello} World!\"</code></p> <p>Parameters:</p> <ul> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>The string to disable line breaks.</p> </li> <li> <code>match_str</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>The string to match.</p> </li> </ul> <p>Returns:     str: The string with the matched part non line breakable.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def make_matched_part_non_line_breakable(\n    value: str, match_str: Optional[str] = None\n) -&gt; str:\n    \"\"\"Make the matched parts of the string non line breakable. If the match_str is\n    None, the whole string will be made nonbreakable.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        make_it_nolinebreak(\"Hello World!\", \"Hello\")\n        ```\n\n        will return:\n\n        `#!python \"\\\\mbox{Hello} World!\"`\n\n    Args:\n        value (str): The string to disable line breaks.\n        match_str (str): The string to match.\n    Returns:\n        str: The string with the matched part non line breakable.\n    \"\"\"\n    return make_matched_part_something(value, \"mbox\", match_str)\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.abbreviate_name","title":"<code>abbreviate_name(name)</code>","text":"<p>Abbreviate a name by keeping the first letters of the first names.</p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>abbreviate_name(\"John Doe\")\n</code></pre> <p>will return:</p> <p><code>\"J. Doe\"</code></p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>The name to abbreviate.</p> </li> </ul> <p>Returns:     str: The abbreviated name.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def abbreviate_name(name: Optional[str]) -&gt; str:\n    \"\"\"Abbreviate a name by keeping the first letters of the first names.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        abbreviate_name(\"John Doe\")\n        ```\n\n        will return:\n\n        `#!python \"J. Doe\"`\n\n    Args:\n        name (str): The name to abbreviate.\n    Returns:\n        str: The abbreviated name.\n    \"\"\"\n    if name is None:\n        return \"\"\n\n    number_of_words = len(name.split(\" \"))\n\n    if number_of_words == 1:\n        return name\n\n    first_names = name.split(\" \")[:-1]\n    first_names_initials = [first_name[0] + \".\" for first_name in first_names]\n    last_name = name.split(\" \")[-1]\n    abbreviated_name = \" \".join(first_names_initials) + \" \" + last_name\n\n    return abbreviated_name\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.divide_length_by","title":"<code>divide_length_by(length, divider)</code>","text":"<p>Divide a length by a number. Length is a string with the following regex pattern: <code>\\d+\\.?\\d* *(cm|in|pt|mm|ex|em)</code></p> <p>This function can be used as a Jinja2 filter in templates.</p> Example <pre><code>divide_length_by(\"10.4cm\", 2)\n</code></pre> <p>will return:</p> <p><code>\"5.2cm\"</code></p> <p>Parameters:</p> <ul> <li> <code>length</code>               (<code>str</code>)           \u2013            <p>The length to divide.</p> </li> <li> <code>divider</code>               (<code>float</code>)           \u2013            <p>The number to divide the length by.</p> </li> </ul> <p>Returns:     str: The divided length.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def divide_length_by(length: str, divider: float) -&gt; str:\n    r\"\"\"Divide a length by a number. Length is a string with the following regex\n    pattern: `\\d+\\.?\\d* *(cm|in|pt|mm|ex|em)`\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Example:\n        ```python\n        divide_length_by(\"10.4cm\", 2)\n        ```\n\n        will return:\n\n        `#!python \"5.2cm\"`\n\n    Args:\n        length (str): The length to divide.\n        divider (float): The number to divide the length by.\n    Returns:\n        str: The divided length.\n    \"\"\"\n    # Get the value as a float and the unit as a string:\n    value = re.search(r\"\\d+\\.?\\d*\", length)\n\n    if value is None:\n        raise ValueError(f\"Invalid length {length}!\")\n    else:\n        value = value.group()\n\n    if divider &lt;= 0:\n        raise ValueError(f\"The divider must be greater than 0, but got {divider}!\")\n\n    unit = re.findall(r\"[^\\d\\.\\s]+\", length)[0]\n\n    return str(float(value) / divider) + \" \" + unit\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.get_an_item_with_a_specific_attribute_value","title":"<code>get_an_item_with_a_specific_attribute_value(items, attribute, value)</code>","text":"<p>Get an item from a list of items with a specific attribute value.</p> <p>This function can be used as a Jinja2 filter in templates.</p> <p>Parameters:</p> <ul> <li> <code>items</code>               (<code>list[Any]</code>)           \u2013            <p>The list of items.</p> </li> <li> <code>attribute</code>               (<code>str</code>)           \u2013            <p>The attribute to check.</p> </li> <li> <code>value</code>               (<code>Any</code>)           \u2013            <p>The value of the attribute.</p> </li> </ul> <p>Returns:     Any: The item with the specific attribute value.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def get_an_item_with_a_specific_attribute_value(\n    items: Optional[list[Any]], attribute: str, value: Any\n) -&gt; Any:\n    \"\"\"Get an item from a list of items with a specific attribute value.\n\n    This function can be used as a Jinja2 filter in templates.\n\n    Args:\n        items (list[Any]): The list of items.\n        attribute (str): The attribute to check.\n        value (Any): The value of the attribute.\n    Returns:\n        Any: The item with the specific attribute value.\n    \"\"\"\n    if items is not None:\n        for item in items:\n            if not hasattr(item, attribute):\n                raise AttributeError(\n                    f\"The attribute {attribute} doesn't exist in the item {item}!\"\n                )\n            else:\n                if getattr(item, attribute) == value:\n                    return item\n\n    return None\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.setup_jinja2_environment","title":"<code>setup_jinja2_environment()</code>","text":"<p>Setup and return the Jinja2 environment for templating the $\\LaTeX$ files.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>jinja2.Environment: The theme environment.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def setup_jinja2_environment() -&gt; jinja2.Environment:\n    \"\"\"Setup and return the Jinja2 environment for templating the $\\\\LaTeX$ files.\n\n    Returns:\n        jinja2.Environment: The theme environment.\n    \"\"\"\n    # create a Jinja2 environment:\n    # we need to add the current working directory because custom themes might be used.\n    themes_directory = pathlib.Path(__file__).parent / \"themes\"\n    environment = jinja2.Environment(\n        loader=jinja2.FileSystemLoader([pathlib.Path.cwd(), themes_directory]),\n        trim_blocks=True,\n        lstrip_blocks=True,\n    )\n\n    # set custom delimiters for LaTeX templating:\n    environment.block_start_string = \"((*\"\n    environment.block_end_string = \"*))\"\n    environment.variable_start_string = \"&lt;&lt;\"\n    environment.variable_end_string = \"&gt;&gt;\"\n    environment.comment_start_string = \"((#\"\n    environment.comment_end_string = \"#))\"\n\n    # add custom filters to make it easier to template the LaTeX files and add new\n    # themes:\n    environment.filters[\"make_it_bold\"] = make_matched_part_bold\n    environment.filters[\"make_it_underlined\"] = make_matched_part_underlined\n    environment.filters[\"make_it_italic\"] = make_matched_part_italic\n    environment.filters[\"make_it_nolinebreak\"] = make_matched_part_non_line_breakable\n    environment.filters[\"make_it_something\"] = make_matched_part_something\n    environment.filters[\"divide_length_by\"] = divide_length_by\n    environment.filters[\"abbreviate_name\"] = abbreviate_name\n    environment.filters[\"replace_placeholders_with_actual_values\"] = (\n        replace_placeholders_with_actual_values\n    )\n    environment.filters[\"get_an_item_with_a_specific_attribute_value\"] = (\n        get_an_item_with_a_specific_attribute_value\n    )\n    environment.filters[\"escape_latex_characters\"] = escape_latex_characters\n\n    return environment\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.generate_latex_file","title":"<code>generate_latex_file(rendercv_data_model, output_directory)</code>","text":"<p>Generate the $\\LaTeX$ file with the given data model and write it to the output directory.</p> <p>Parameters:</p> <ul> <li> <code>rendercv_data_model</code>               (<code>RenderCVDataModel</code>)           \u2013            <p>The data model.</p> </li> <li> <code>output_directory</code>               (<code>Path</code>)           \u2013            <p>Path to the output directory.</p> </li> </ul> <p>Returns:     pathlib.Path: The path to the generated $\\LaTeX$ file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def generate_latex_file(\n    rendercv_data_model: dm.RenderCVDataModel, output_directory: pathlib.Path\n) -&gt; pathlib.Path:\n    \"\"\"Generate the $\\\\LaTeX$ file with the given data model and write it to the output\n    directory.\n\n    Args:\n        rendercv_data_model (dm.RenderCVDataModel): The data model.\n        output_directory (pathlib.Path): Path to the output directory.\n    Returns:\n        pathlib.Path: The path to the generated $\\\\LaTeX$ file.\n    \"\"\"\n    # create output directory if it doesn't exist:\n    if not output_directory.is_dir():\n        output_directory.mkdir(parents=True)\n\n    jinja2_environment = setup_jinja2_environment()\n    latex_file_object = LaTeXFile(\n        rendercv_data_model,\n        jinja2_environment,\n    )\n\n    latex_file_name = f\"{str(rendercv_data_model.cv.name).replace(' ', '_')}_CV.tex\"\n    latex_file_path = output_directory / latex_file_name\n    latex_file_object.generate_latex_file(latex_file_path)\n\n    return latex_file_path\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.generate_markdown_file","title":"<code>generate_markdown_file(rendercv_data_model, output_directory)</code>","text":"<p>Generate the Markdown file with the given data model and write it to the output directory.</p> <p>Parameters:</p> <ul> <li> <code>rendercv_data_model</code>               (<code>RenderCVDataModel</code>)           \u2013            <p>The data model.</p> </li> <li> <code>output_directory</code>               (<code>Path</code>)           \u2013            <p>Path to the output directory.</p> </li> </ul> <p>Returns:     pathlib.Path: The path to the generated Markdown file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def generate_markdown_file(\n    rendercv_data_model: dm.RenderCVDataModel, output_directory: pathlib.Path\n) -&gt; pathlib.Path:\n    \"\"\"Generate the Markdown file with the given data model and write it to the output\n    directory.\n\n    Args:\n        rendercv_data_model (dm.RenderCVDataModel): The data model.\n        output_directory (pathlib.Path): Path to the output directory.\n    Returns:\n        pathlib.Path: The path to the generated Markdown file.\n    \"\"\"\n    # create output directory if it doesn't exist:\n    if not output_directory.is_dir():\n        output_directory.mkdir(parents=True)\n\n    jinja2_environment = setup_jinja2_environment()\n    markdown_file_object = MarkdownFile(\n        rendercv_data_model,\n        jinja2_environment,\n    )\n\n    markdown_file_name = f\"{str(rendercv_data_model.cv.name).replace(' ', '_')}_CV.md\"\n    markdown_file_path = output_directory / markdown_file_name\n    markdown_file_object.generate_markdown_file(markdown_file_path)\n\n    return markdown_file_path\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.copy_theme_files_to_output_directory","title":"<code>copy_theme_files_to_output_directory(theme_name, output_directory_path)</code>","text":"<p>Copy the auxiliary files (all the files that don't end with <code>.j2.tex</code> and <code>.py</code>) of the theme to the output directory. For example, a theme can have custom fonts, and the $\\LaTeX$ needs it. If the theme is a custom theme, then it will be copied from the current working directory.</p> <p>Parameters:</p> <ul> <li> <code>theme_name</code>               (<code>str</code>)           \u2013            <p>The name of the theme.</p> </li> <li> <code>output_directory_path</code>               (<code>Path</code>)           \u2013            <p>Path to the output directory.</p> </li> </ul> Source code in <code>rendercv/renderer.py</code> <pre><code>def copy_theme_files_to_output_directory(\n    theme_name: str,\n    output_directory_path: pathlib.Path,\n):\n    \"\"\"Copy the auxiliary files (all the files that don't end with `.j2.tex` and `.py`)\n    of the theme to the output directory. For example, a theme can have custom\n    fonts, and the $\\\\LaTeX$ needs it. If the theme is a custom theme, then it will be\n    copied from the current working directory.\n\n    Args:\n        theme_name (str): The name of the theme.\n        output_directory_path (pathlib.Path): Path to the output directory.\n    \"\"\"\n    if theme_name in dm.available_themes:\n        theme_directory_path = importlib.resources.files(\n            f\"rendercv.themes.{theme_name}\"\n        )\n    else:\n        # Then it means the theme is a custom theme. If theme_directory is not given\n        # as an argument, then look for the theme in the current working directory.\n        theme_directory_path = pathlib.Path(pathlib.Path.cwd()) / theme_name\n\n        if not theme_directory_path.is_dir():\n            raise FileNotFoundError(\n                f\"The theme {theme_name} doesn't exist in the current working\"\n                \" directory!\"\n            )\n\n    for theme_file in theme_directory_path.iterdir():\n        dont_copy_files_with_these_extensions = [\".j2.tex\", \".py\"]\n        # theme_file.suffix returns the latest part of the file name after the last dot.\n        # But we need the latest part of the file name after the first dot:\n        try:\n            suffix = re.search(r\"\\..*\", theme_file.name)[0]\n        except TypeError:\n            suffix = \"\"\n\n        if suffix not in dont_copy_files_with_these_extensions:\n            if theme_file.is_dir():\n                shutil.copytree(\n                    str(theme_file),\n                    output_directory_path / theme_file.name,\n                    dirs_exist_ok=True,\n                )\n            else:\n                shutil.copyfile(\n                    str(theme_file), output_directory_path / theme_file.name\n                )\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.generate_latex_file_and_copy_theme_files","title":"<code>generate_latex_file_and_copy_theme_files(rendercv_data_model, output_directory)</code>","text":"<p>Generate the $\\LaTeX$ file with the given data model in the output directory and copy the auxiliary theme files to the output directory.</p> <p>Parameters:</p> <ul> <li> <code>rendercv_data_model</code>               (<code>RenderCVDataModel</code>)           \u2013            <p>The data model.</p> </li> <li> <code>output_directory</code>               (<code>Path</code>)           \u2013            <p>Path to the output directory.</p> </li> </ul> <p>Returns:     pathlib.Path: The path to the generated $\\LaTeX$ file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def generate_latex_file_and_copy_theme_files(\n    rendercv_data_model: dm.RenderCVDataModel, output_directory: pathlib.Path\n) -&gt; pathlib.Path:\n    \"\"\"Generate the $\\\\LaTeX$ file with the given data model in the output directory and\n    copy the auxiliary theme files to the output directory.\n\n    Args:\n        rendercv_data_model (dm.RenderCVDataModel): The data model.\n        output_directory (pathlib.Path): Path to the output directory.\n    Returns:\n        pathlib.Path: The path to the generated $\\\\LaTeX$ file.\n    \"\"\"\n    latex_file_path = generate_latex_file(rendercv_data_model, output_directory)\n    copy_theme_files_to_output_directory(\n        rendercv_data_model.design.theme, output_directory\n    )\n    return latex_file_path\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.latex_to_pdf","title":"<code>latex_to_pdf(latex_file_path, local_latex_command=None)</code>","text":"<p>Run TinyTeX with the given $\\LaTeX$ file to generate the PDF.</p> <p>Parameters:</p> <ul> <li> <code>latex_file_path</code>               (<code>str</code>)           \u2013            <p>The path to the $\\LaTeX$ file to compile.</p> </li> </ul> <p>Returns:     pathlib.Path: The path to the generated PDF file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def latex_to_pdf(\n    latex_file_path: pathlib.Path, local_latex_command: Optional[str] = None\n) -&gt; pathlib.Path:\n    \"\"\"Run TinyTeX with the given $\\\\LaTeX$ file to generate the PDF.\n\n    Args:\n        latex_file_path (str): The path to the $\\\\LaTeX$ file to compile.\n    Returns:\n        pathlib.Path: The path to the generated PDF file.\n    \"\"\"\n    # check if the file exists:\n    if not latex_file_path.is_file():\n        raise FileNotFoundError(f\"The file {latex_file_path} doesn't exist!\")\n\n    if local_latex_command:\n        executable = local_latex_command\n\n        # check if the command is working:\n        try:\n            subprocess.run(\n                [executable, \"--version\"],\n                stdout=subprocess.DEVNULL,  # don't capture the output\n                stderr=subprocess.DEVNULL,  # don't capture the error\n            )\n        except FileNotFoundError:\n            raise FileNotFoundError(\n                f\"[blue]{executable}[/blue] isn't installed! Please install LaTeX and\"\n                \" try again (or don't use the\"\n                \" [bright_black]--use-local-latex-command[/bright_black] option).\"\n            )\n    else:\n        tinytex_binaries_directory = (\n            pathlib.Path(__file__).parent / \"tinytex-release\" / \"TinyTeX\" / \"bin\"\n        )\n\n        executables = {\n            \"win32\": tinytex_binaries_directory / \"windows\" / \"pdflatex.exe\",\n            \"linux\": tinytex_binaries_directory / \"x86_64-linux\" / \"pdflatex\",\n            \"darwin\": tinytex_binaries_directory / \"universal-darwin\" / \"pdflatex\",\n        }\n\n        if sys.platform not in executables:\n            raise OSError(f\"TinyTeX doesn't support the platform {sys.platform}!\")\n\n        executable = executables[sys.platform]\n    # Run TinyTeX:\n    command = [\n        executable,\n        str(latex_file_path.absolute()),\n    ]\n    with subprocess.Popen(\n        command,\n        cwd=latex_file_path.parent,\n        stdout=subprocess.PIPE,  # capture the output\n        stderr=subprocess.DEVNULL,  # don't capture the error\n        stdin=subprocess.DEVNULL,  # don't allow TinyTeX to ask for user input\n    ) as latex_process:\n        output = latex_process.communicate()  # wait for the process to finish\n        if latex_process.returncode != 0:\n            raise RuntimeError(\n                \"Unfortunately, RenderCV's built-in TinyTeX binaries couldn't render\"\n                \" this LaTeX file into a PDF. This could be caused by one of two\"\n                \" reasons:\\n\\n1- The theme templates might have been updated in a way\"\n                \" RenderCV's TinyTeX cannot render. RenderCV's TinyTeX is minified to\"\n                \" keep the package size small. As a result, it doesn't function like a\"\n                \" general-purpose LaTeX distribution.\\n2- Special characters, like\"\n                \" Greek or Chinese letters, that are not compatible with the fonts used\"\n                \" or RenderCV's TinyTeX might have been used.\\n\\nHowever, this issue\"\n                \" can be resolved quickly. RenderCV allows you to run your own LaTeX\"\n                \" distribution instead of the built-in TinyTeX. This can be done with\"\n                \" the '--use-local-latex-command' option, as shown below:\\n\\nrendercv\"\n                \" render --use-local-latex-command lualatex John_Doe_CV.yaml\\n\\nIf you\"\n                \" ensure that the generated LaTeX file can be compiled by your local\"\n                \" LaTeX distribution, RenderCV will work successfully. You can debug\"\n                \" the generated LaTeX file in your LaTeX editor to resolve any bugs.\"\n                \" Then, you can start using RenderCV with your local LaTeX\"\n                \" distribution.\\n\\nIf you can't solve the problem, please open an issue\"\n                \" on GitHub.\"\n            )\n        else:\n            try:\n                output = output[0].decode(\"utf-8\")\n            except UnicodeDecodeError:\n                output = output[0].decode(\"latin-1\")\n\n            if \"Rerun to get\" in output:\n                # Run TinyTeX again to get the references right:\n                subprocess.run(\n                    command,\n                    cwd=latex_file_path.parent,\n                    stdout=subprocess.DEVNULL,  # don't capture the output\n                    stderr=subprocess.DEVNULL,  # don't capture the error\n                    stdin=subprocess.DEVNULL,  # don't allow TinyTeX to ask for user input\n                )\n\n    # check if the PDF file is generated:\n    pdf_file_path = latex_file_path.with_suffix(\".pdf\")\n    if not pdf_file_path.is_file():\n        raise RuntimeError(\n            \"The PDF file couldn't be generated! If you can't solve the problem,\"\n            \" please try to re-install RenderCV, or open an issue on GitHub.\"\n        )\n\n    return pdf_file_path\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.pdf_to_pngs","title":"<code>pdf_to_pngs(pdf_file_path)</code>","text":"<p>Convert the given PDF file to PNG files.</p> <p>Parameters:</p> <ul> <li> <code>pdf_file_path</code>               (<code>Path</code>)           \u2013            <p>The path to the PDF file to convert.</p> </li> </ul> <p>Returns:     list[pathlib.Path]: The paths to the generated PNG files.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def pdf_to_pngs(pdf_file_path: pathlib.Path) -&gt; list[pathlib.Path]:\n    \"\"\"Convert the given PDF file to PNG files.\n\n    Args:\n        pdf_file_path (pathlib.Path): The path to the PDF file to convert.\n    Returns:\n        list[pathlib.Path]: The paths to the generated PNG files.\n    \"\"\"\n    # check if the file exists:\n    if not pdf_file_path.is_file():\n        raise FileNotFoundError(f\"The file {pdf_file_path} doesn't exist!\")\n\n    # convert the PDF to PNG:\n    png_directory = pdf_file_path.parent\n    png_file_name = pdf_file_path.stem\n    png_files = []\n    pdf = fitz.open(pdf_file_path)  # open the PDF file\n    for page in pdf:  # iterate the pages\n        image = page.get_pixmap(dpi=300)\n        png_file_path = png_directory / f\"{png_file_name}_{page.number+1}.png\"\n        image.save(png_file_path)\n        png_files.append(png_file_path)\n\n    return png_files\n</code></pre>"},{"location":"reference/renderer/#rendercv.renderer.markdown_to_html","title":"<code>markdown_to_html(markdown_file_path)</code>","text":"<p>Convert a markdown file to HTML.</p> <p>RenderCV doesn't produce an HTML file as the final output, but generates it for users to easily copy and paste the HTML into Grammarly for proofreading purposes.</p> <p>Parameters:</p> <ul> <li> <code>markdown_file_path</code>               (<code>Path</code>)           \u2013            <p>The path to the markdown file to convert.</p> </li> </ul> <p>Returns:     pathlib.Path: The path to the generated HTML file.</p> Source code in <code>rendercv/renderer.py</code> <pre><code>def markdown_to_html(markdown_file_path: pathlib.Path) -&gt; pathlib.Path:\n    \"\"\"Convert a markdown file to HTML.\n\n    RenderCV doesn't produce an HTML file as the final output, but generates it for\n    users to easily copy and paste the HTML into Grammarly for proofreading purposes.\n\n    Args:\n        markdown_file_path (pathlib.Path): The path to the markdown file to convert.\n    Returns:\n        pathlib.Path: The path to the generated HTML file.\n    \"\"\"\n    # check if the file exists:\n    if not markdown_file_path.is_file():\n        raise FileNotFoundError(f\"The file {markdown_file_path} doesn't exist!\")\n\n    html_file_path = (\n        markdown_file_path.parent / f\"{markdown_file_path.stem}_PASTETOGRAMMARLY.html\"\n    )\n\n    # Convert the markdown file to HTML:\n    html = markdown.markdown(markdown_file_path.read_text(encoding=\"utf-8\"))\n\n    # write html into a file:\n    html_file_path.write_text(html, encoding=\"utf-8\")\n\n    return html_file_path\n</code></pre>"},{"location":"reference/themes/","title":"Themes","text":"<p>This module containts some general-purpose data models for the themes. The themes are encouraged to inherit from these data models and add their own options, to avoid code duplication.</p>"},{"location":"reference/themes/#rendercv.themes.PageMargins","title":"<code>PageMargins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the page margins.</p>"},{"location":"reference/themes/#rendercv.themes.SectionTitleMargins","title":"<code>SectionTitleMargins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the section title margins.</p>"},{"location":"reference/themes/#rendercv.themes.EntryAreaMargins","title":"<code>EntryAreaMargins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the entry area margins.</p>"},{"location":"reference/themes/#rendercv.themes.HighlightsAreaMargins","title":"<code>HighlightsAreaMargins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the highlights area margins.</p>"},{"location":"reference/themes/#rendercv.themes.HeaderMargins","title":"<code>HeaderMargins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the header margins.</p>"},{"location":"reference/themes/#rendercv.themes.Margins","title":"<code>Margins</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a data model for the margins.</p>"},{"location":"reference/themes/#rendercv.themes.ThemeOptions","title":"<code>ThemeOptions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>This class is a generic data model for the theme options. The themes are encouraged to inherit from this data model and add their own options, to avoid code duplication.</p>"},{"location":"reference/themes/classic/","title":"Classic Theme","text":""},{"location":"reference/themes/classic/#onelineentry","title":"OneLineEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    \\textbf{&lt;&lt;entry.label&gt;&gt;:} &lt;&lt;entry.details&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/classic/#textentry","title":"TextEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    &lt;&lt;entry&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/classic/#sectionending","title":"SectionEnding","text":"<pre><code>((* if entry_type == \"BulletEntry\" *))\n    \\end{highlightsforbulletentries}\n\\end{onecolentry}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/classic/#experienceentry","title":"ExperienceEntry","text":"<pre><code>((* if section_title in design.show_timespan_in *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string, entry.time_span_string]|select(\"!=\", \"\") *))\n((* else *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string]|select(\"!=\", \"\") *))\n((* endif *))\n((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n((* if entry.date_string or entry.location *))\n\\begin{twocolentry}{\n    &lt;&lt;date_and_location_strings|join(\"\\n\\n\")&gt;&gt;\n}\n    \\textbf{&lt;&lt;entry.company&gt;&gt;}, &lt;&lt;entry.position&gt;&gt;\n    ((* for item in entry.highlights *))\n        ((* if loop.first *))\n    \\begin{highlights}\n        ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n        ((* if loop.last *))\n    \\end{highlights}\n        ((* endif *))\n    ((* endfor *))\n\\end{twocolentry}\n((* else *))\n\\begin{onecolentry}\n    \\textbf{&lt;&lt;entry.company&gt;&gt;}, &lt;&lt;entry.position&gt;&gt;\n    ((* for item in entry.highlights *))\n        ((* if loop.first *))\n    \\begin{highlights}\n        ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n        ((* if loop.last *))\n    \\end{highlights}\n        ((* endif *))\n    ((* endfor *))\n\\end{onecolentry}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/classic/#sectionbeginning","title":"SectionBeginning","text":"<pre><code>\\section{&lt;&lt;section_title&gt;&gt;}\n\n((* if entry_type == \"BulletEntry\" *))\n\\begin{onecolentry}\n    \\begin{highlightsforbulletentries}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/classic/#header","title":"Header","text":"<pre><code>((* if not design.disable_last_updated_date *))\n\\placelastupdatedtext\n((* endif *))\n((* if cv.name is not none *))\n\\begin{header}\n    \\fontsize{&lt;&lt;design.header_font_size&gt;&gt;}{&lt;&lt;design.header_font_size&gt;&gt;}\n    \\textbf{&lt;&lt;cv.name&gt;&gt;}\n\n    \\vspace{&lt;&lt;design.margins.header.vertical_between_name_and_connections&gt;&gt;}\n\n    \\normalsize\n    ((* for connection in cv.connections *))\n    \\mbox{((*- if connection[\"url\"] -*))\n        \\hrefWithoutArrow{&lt;&lt;connection[\"url\"]&gt;&gt;}{{\\footnotesize&lt;&lt;connection[\"latex_icon\"]&gt;&gt;}\\hspace*{0.13cm}&lt;&lt;connection[\"placeholder\"]|escape_latex_characters&gt;&gt;}\n        ((*- else -*))\n        {\\footnotesize&lt;&lt;connection[\"latex_icon\"]&gt;&gt;}\\hspace*{0.13cm}&lt;&lt;connection[\"placeholder\"]|escape_latex_characters&gt;&gt;\n        ((*- endif -*))}\n    \\kern &lt;&lt;design.margins.header.horizontal_between_connections&gt;&gt;\n    ((* endfor *))\n\\end{header}\n\n\\vspace{&lt;&lt;design.margins.header.bottom&gt;&gt; - &lt;&lt;design.margins.section_title.top&gt;&gt;}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/classic/#preamble","title":"Preamble","text":"<pre><code>\\documentclass[&lt;&lt;design.font_size&gt;&gt;, &lt;&lt;design.page_size&gt;&gt;]{article}\n\n% Packages:\n\\usepackage[\n    ignoreheadfoot, % set margins without considering header and footer\n    top=&lt;&lt;design.margins.page.top&gt;&gt;, % seperation between body and page edge from the top\n    bottom=&lt;&lt;design.margins.page.bottom&gt;&gt;, % seperation between body and page edge from the bottom\n    left=&lt;&lt;design.margins.page.left&gt;&gt;, % seperation between body and page edge from the left\n    right=&lt;&lt;design.margins.page.right&gt;&gt;, % seperation between body and page edge from the right\n    footskip=&lt;&lt;design.margins.page.bottom|divide_length_by(2)&gt;&gt;, % seperation between body and footer\n    % showframe % for debugging \n]{geometry} % for adjusting page geometry\n\\usepackage[explicit]{titlesec} % for customizing section titles\n\\usepackage{tabularx} % for making tables with fixed width columns\n\\usepackage{array} % tabularx requires this\n\\usepackage[dvipsnames]{xcolor} % for coloring text\n\\definecolor{primaryColor}{RGB}{&lt;&lt;design.color.as_rgb_tuple()|join(\", \")&gt;&gt;} % define primary color\n\\usepackage{enumitem} % for customizing lists\n\\usepackage{fontawesome5} % for using icons\n\\usepackage{amsmath} % for math\n\\usepackage[\n    pdftitle={&lt;&lt;cv.name&gt;&gt;'s CV},\n    pdfauthor={&lt;&lt;cv.name&gt;&gt;},\n    colorlinks=true,\n    urlcolor=primaryColor\n]{hyperref} % for links, metadata and bookmarks\n\\usepackage[pscoord]{eso-pic} % for floating text on the page\n\\usepackage{calc} % for calculating lengths\n\\usepackage{bookmark} % for bookmarks\n\\usepackage{lastpage} % for getting the total number of pages\n\\usepackage{changepage} % for one column entries (adjustwidth environment)\n\\usepackage{paracol} % for two and three column entries\n\\usepackage{ifthen} % for conditional statements\n\\usepackage{needspace} % for avoiding page brake right after the section title\n\\usepackage{iftex} % check if engine is pdflatex, xetex or luatex\n\n% Ensure that generate pdf is machine readable/ATS parsable:\n\\ifPDFTeX\n    \\input{glyphtounicode}\n    \\pdfgentounicode=1\n    \\usepackage[T1]{fontenc}\n    \\usepackage[utf8]{inputenc}\n    \\usepackage{lmodern}\n\\fi\n\n((* if design.font == \"Latin Modern Serif\" *))\n\n((* elif design.font == \"Latin Modern Sans Serif\" *))\n\\renewcommand{\\familydefault}{\\sfdefault}\n((* elif design.font == \"Latin Modern Mono\" *))\n\\renewcommand{\\familydefault}{\\ttdefault}\n((* elif design.font == \"Source Sans 3\" *))\n\\usepackage[default, type1]{sourcesanspro} \n((* elif design.font == \"Charter\" *))\n\\usepackage{charter}\n((* endif *))\n\n% Some settings:\n((* if design.text_alignment == \"justified-with-no-hyphenation\" *))\n\\usepackage[none]{hyphenat}\n\\sloppy\n((* elif design.text_alignment == \"left-aligned\" *))\n\\raggedright\n((* endif *))\n\\AtBeginEnvironment{adjustwidth}{\\partopsep0pt} % remove space before adjustwidth environment\n\\pagestyle{empty} % no header or footer\n\\setcounter{secnumdepth}{0} % no section numbering\n\\setlength{\\parindent}{0pt} % no indentation\n\\setlength{\\topskip}{0pt} % no top skip\n\\setlength{\\columnsep}{0.15cm} % set column seperation\n((* if design.disable_page_numbering *))\n\\pagenumbering{gobble} % no page numbering\n((* else *))\n((* set page_numbering_style_placeholders = {\n    \"NAME\": cv.name,\n    \"PAGE_NUMBER\": \"\\\\thepage{}\",\n    \"TOTAL_PAGES\": \"\\pageref*{LastPage}\"\n} *))\n\\makeatletter\n\\let\\ps@customFooterStyle\\ps@plain % Copy the plain style to customFooterStyle\n\\patchcmd{\\ps@customFooterStyle}{\\thepage}{\n    \\color{gray}\\textit{\\small &lt;&lt;design.page_numbering_style|replace_placeholders_with_actual_values(page_numbering_style_placeholders)&gt;&gt;}\n}{}{} % replace number by desired string\n\\makeatother\n\\pagestyle{customFooterStyle}\n((* endif *))\n\n\\titleformat{\\section}{\n    % avoid page braking right after the section title\n    \\needspace{4\\baselineskip}\n    % make the font size of the section title large and color it with the primary color\n    \\Large\\color{primaryColor}\n}{\n}{\n}{\n    % print bold title, give 0.15 cm space and draw a line of 0.8 pt thickness\n    % from the end of the title to the end of the body\n    \\textbf{#1}\\hspace{0.15cm}\\titlerule[0.8pt]\\hspace{-0.1cm}\n}[] % section title formatting\n\n\\titlespacing{\\section}{\n    % left space:\n    -1pt\n}{\n    % top space:\n    &lt;&lt;design.margins.section_title.top&gt;&gt;\n}{\n    % bottom space:\n    &lt;&lt;design.margins.section_title.bottom&gt;&gt;\n} % section title spacing\n\n% \\renewcommand\\labelitemi{$\\vcenter{\\hbox{\\small$\\bullet$}}$} % custom bullet points\n\\newenvironment{highlights}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=&lt;&lt;design.margins.highlights_area.left&gt;&gt; + 10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights\n\n\\newenvironment{highlightsforbulletentries}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights for bullet entries\n\n\n\\newenvironment{onecolentry}{\n    \\begin{adjustwidth}{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }\n}{\n    \\end{adjustwidth}\n} % new environment for one column entries\n\n\\newenvironment{twocolentry}[2][]{\n    \\onecolentry\n    \\def\\secondColumn{#2}\n    \\setcolumnwidth{\\fill, &lt;&lt;design.margins.entry_area.date_and_location_width&gt;&gt;}\n    \\begin{paracol}{2}\n}{\n    \\switchcolumn \\raggedleft \\secondColumn\n    \\end{paracol}\n    \\endonecolentry\n} % new environment for two column entries\n\n\\newenvironment{threecolentry}[3][]{\n    \\onecolentry\n    \\def\\thirdColumn{#3}\n    \\setcolumnwidth{&lt;&lt;design.margins.entry_area.education_degree_width&gt;&gt;, \\fill, &lt;&lt;design.margins.entry_area.date_and_location_width&gt;&gt;}\n    \\begin{paracol}{3}\n    {\\raggedright #2} \\switchcolumn\n}{\n    \\switchcolumn \\raggedleft \\thirdColumn\n    \\end{paracol}\n    \\endonecolentry\n} % new environment for three column entries\n\n\\newenvironment{header}{\n    \\setlength{\\topsep}{0pt}\\par\\kern\\topsep\\centering\\color{primaryColor}\\linespread{1.5}\n}{\n    \\par\\kern\\topsep\n} % new environment for the header\n\n((* set last_updated_date_style_placeholders = {\n    \"TODAY\": today,\n} *))\n\\newcommand{\\placelastupdatedtext}{% \\placetextbox{&lt;horizontal pos&gt;}{&lt;vertical pos&gt;}{&lt;stuff&gt;}\n  \\AddToShipoutPictureFG*{% Add &lt;stuff&gt; to current page foreground\n    \\put(\n        \\LenToUnit{\\paperwidth-&lt;&lt;design.margins.page.right&gt;&gt;-&lt;&lt;design.margins.entry_area.left_and_right&gt;&gt;+0.05cm},\n        \\LenToUnit{\\paperheight-&lt;&lt;design.margins.page.top|divide_length_by(2)&gt;&gt;}\n    ){\\vtop{{\\null}\\makebox[0pt][c]{\n        \\small\\color{gray}\\textit{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}\\hspace{\\widthof{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}}\n    }}}%\n  }%\n}%\n\n% save the original href command in a new command:\n\\let\\hrefWithoutArrow\\href\n\n% new command for external links:\n((* if not design.disable_external_link_icons *))\n\\renewcommand{\\href}[2]{\\hrefWithoutArrow{#1}{\\mbox{\\ifthenelse{\\equal{#2}{}}{ }{#2 }\\raisebox{.15ex}{\\footnotesize \\faExternalLink*}}}}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/classic/#publicationentry","title":"PublicationEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{samepage}\n    ((* if entry.date_string *))\n    \\begin{twocolentry}{\n        &lt;&lt;entry.date_string&gt;&gt;\n    }\n    ((* else *))\n    \\begin{onecolentry}\n    ((* endif *))\n        \\textbf{&lt;&lt;entry.title&gt;&gt;}\n\n        \\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\n        &lt;&lt;entry.authors|map(\"make_it_nolinebreak\")|join(\", \")&gt;&gt;\n        ((* if entry.doi or entry.journal *))\n        \\vspace{&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;}\n\n        ((* endif *))\n        ((* if entry.doi -*))\n        \\href{&lt;&lt;entry.doi_url&gt;&gt;}{&lt;&lt;entry.doi&gt;&gt;}\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)) (((* endif -*))\n        ((*- if entry.journal -*))\n        &lt;&lt;entry.journal&gt;&gt;\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)))((* endif *))\n    ((* if entry.date_string *))\n    \\end{twocolentry}\n    ((* else *))\n    \\end{onecolentry}\n    ((* endif *))\n\\end{samepage}\n</code></pre>"},{"location":"reference/themes/classic/#educationentry","title":"EducationEntry","text":"<pre><code>((* if section_title in design.show_timespan_in *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string, entry.time_span_string]|select(\"!=\", \"\") *))\n((* else *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string]|select(\"!=\", \"\") *))\n((* endif *))\n((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{threecolentry}{\\textbf{&lt;&lt;entry.degree&gt;&gt;}}{\n    &lt;&lt;date_and_location_strings|join(\"\\n\\n\")&gt;&gt;\n}\n    \\textbf{&lt;&lt;entry.institution&gt;&gt;}, &lt;&lt;entry.area&gt;&gt;\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n    ((* endif *))\n((* endfor *))\n\\end{threecolentry}\n</code></pre>"},{"location":"reference/themes/classic/#bulletentry","title":"BulletEntry","text":"<pre><code>\\item &lt;&lt;entry.bullet&gt;&gt;\n</code></pre>"},{"location":"reference/themes/classic/#normalentry","title":"NormalEntry","text":"<pre><code>((* if section_title in design.show_timespan_in *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string, entry.time_span_string]|select(\"!=\", \"\") *))\n((* else *))\n    ((* set date_and_location_strings = [entry.location, entry.date_string]|select(\"!=\", \"\") *))\n((* endif *))\n((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n((* if entry.date_string or entry.location *))\n\\begin{twocolentry}{\n    &lt;&lt;date_and_location_strings|join(\"\\n\\n\")&gt;&gt;\n}\n    \\textbf{&lt;&lt;entry.name&gt;&gt;}\n    ((* for item in entry.highlights *))\n        ((* if loop.first *))\n    \\begin{highlights}\n        ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n        ((* if loop.last *))\n    \\end{highlights}\n        ((* endif *))\n    ((* endfor *))\n\\end{twocolentry}\n((* else *))\n\\begin{onecolentry}\n    \\textbf{&lt;&lt;entry.name&gt;&gt;}\n    ((* for item in entry.highlights *))\n        ((* if loop.first *))\n    \\begin{highlights}\n        ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n        ((* if loop.last *))\n    \\end{highlights}\n        ((* endif *))\n    ((* endfor *))\n\\end{onecolentry}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/","title":"Engineeringresumes Theme","text":""},{"location":"reference/themes/engineeringresumes/#onelineentry","title":"OneLineEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    \\textbf{&lt;&lt;entry.label&gt;&gt;:} &lt;&lt;entry.details&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#textentry","title":"TextEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    &lt;&lt;entry&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#sectionending","title":"SectionEnding","text":"<pre><code>((* if entry_type == \"BulletEntry\" *))\n    \\end{highlightsforbulletentries}\n\\end{onecolentry}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#experienceentry","title":"ExperienceEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n((* if entry.date_string *))\n\\begin{twocolentry}{\n    &lt;&lt;entry.date_string&gt;&gt;\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.position&gt;&gt;}, &lt;&lt;entry.company&gt;&gt;((* if entry.location *)) -- &lt;&lt;entry.location&gt;&gt;((* endif *))\n((* if entry.date_string *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#sectionbeginning","title":"SectionBeginning","text":"<pre><code>\\section{&lt;&lt;section_title&gt;&gt;}\n\n((* if entry_type == \"BulletEntry\" *))\n\\begin{onecolentry}\n    \\begin{highlightsforbulletentries}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#header","title":"Header","text":"<pre><code>\\newcommand{\\AND}{\\unskip\n    \\cleaders\\copy\\ANDbox\\hskip\\wd\\ANDbox\n    \\ignorespaces\n}\n\\newsavebox\\ANDbox\n\\sbox\\ANDbox{$|$}\n\n((* if not design.disable_last_updated_date *))\n\\placelastupdatedtext\n((* endif *))\n((* if cv.name is not none *))\n\\begin{header}\n    \\fontsize{&lt;&lt;design.header_font_size&gt;&gt;}{&lt;&lt;design.header_font_size&gt;&gt;}\\selectfont &lt;&lt;cv.name&gt;&gt;\n\n    \\vspace{&lt;&lt;design.margins.header.vertical_between_name_and_connections&gt;&gt;}\n\n    \\normalsize\n    ((* for connection in cv.connections *))\n    \\mbox{((*- if connection[\"url\"] -*))\n        \\hrefWithoutArrow{&lt;&lt;connection[\"url\"]&gt;&gt;}{&lt;&lt;connection[\"clean_url\"]|escape_latex_characters&gt;&gt;}\n        ((*- else -*))\n        &lt;&lt;connection[\"placeholder\"]|escape_latex_characters&gt;&gt;\n        ((*- endif -*))}%\n    \\kern &lt;&lt;design.margins.header.horizontal_between_connections|divide_length_by(2)&gt;&gt;%\n    ((* if not loop.last *))\n    \\AND%\n    ((* endif *))\n    \\kern &lt;&lt;design.margins.header.horizontal_between_connections|divide_length_by(2)&gt;&gt;%\n    ((* endfor *))\n\\end{header}\n\n\\vspace{&lt;&lt;design.margins.header.bottom&gt;&gt; - &lt;&lt;design.margins.section_title.top&gt;&gt;}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#preamble","title":"Preamble","text":"<pre><code>\\documentclass[&lt;&lt;design.font_size&gt;&gt;, &lt;&lt;design.page_size&gt;&gt;]{article}\n\n% Packages:\n\\usepackage[\n    ignoreheadfoot, % set margins without considering header and footer\n    top=&lt;&lt;design.margins.page.top&gt;&gt;, % seperation between body and page edge from the top\n    bottom=&lt;&lt;design.margins.page.bottom&gt;&gt;, % seperation between body and page edge from the bottom\n    left=&lt;&lt;design.margins.page.left&gt;&gt;, % seperation between body and page edge from the left\n    right=&lt;&lt;design.margins.page.right&gt;&gt;, % seperation between body and page edge from the right\n    footskip=&lt;&lt;design.margins.page.bottom|divide_length_by(2)&gt;&gt;, % seperation between body and footer\n    % showframe % for debugging \n]{geometry} % for adjusting page geometry\n\\usepackage{titlesec} % for customizing section titles\n\\usepackage{tabularx} % for making tables with fixed width columns\n\\usepackage{array} % tabularx requires this\n\\usepackage[dvipsnames]{xcolor} % for coloring text\n\\definecolor{primaryColor}{RGB}{&lt;&lt;design.color.as_rgb_tuple()|join(\", \")&gt;&gt;} % define primary color\n\\usepackage{enumitem} % for customizing lists\n\\usepackage{fontawesome5} % for using icons\n\\usepackage{amsmath} % for math\n\\usepackage[\n    pdftitle={&lt;&lt;cv.name&gt;&gt;'s CV},\n    pdfauthor={&lt;&lt;cv.name&gt;&gt;},\n    colorlinks=true,\n    urlcolor=primaryColor\n]{hyperref} % for links, metadata and bookmarks\n\\usepackage[pscoord]{eso-pic} % for floating text on the page\n\\usepackage{calc} % for calculating lengths\n\\usepackage{bookmark} % for bookmarks\n\\usepackage{lastpage} % for getting the total number of pages\n\\usepackage{changepage} % for one column entries (adjustwidth environment)\n\\usepackage{paracol} % for two and three column entries\n\\usepackage{ifthen} % for conditional statements\n\\usepackage{needspace} % for avoiding page brake right after the section title\n\\usepackage{iftex} % check if engine is pdflatex, xetex or luatex\n\n% Ensure that generate pdf is machine readable/ATS parsable:\n\\ifPDFTeX\n    \\input{glyphtounicode}\n    \\pdfgentounicode=1\n    \\usepackage[T1]{fontenc}\n    \\usepackage[utf8]{inputenc}\n    \\usepackage{lmodern}\n\\fi\n\n((* if design.font == \"Latin Modern Serif\" *))\n\n((* elif design.font == \"Latin Modern Sans Serif\" *))\n\\renewcommand{\\familydefault}{\\sfdefault}\n((* elif design.font == \"Latin Modern Mono\" *))\n\\renewcommand{\\familydefault}{\\ttdefault}\n((* elif design.font == \"Source Sans 3\" *))\n\\usepackage[default, type1]{sourcesanspro} \n((* elif design.font == \"Charter\" *))\n\\usepackage{charter}\n((* endif *))\n\n% Some settings:\n((* if design.text_alignment == \"justified-with-no-hyphenation\" *))\n\\usepackage[none]{hyphenat}\n\\sloppy\n((* elif design.text_alignment == \"left-aligned\" *))\n\\raggedright\n((* endif *))\n\\AtBeginEnvironment{adjustwidth}{\\partopsep0pt} % remove space before adjustwidth environment\n\\pagestyle{empty} % no header or footer\n\\setcounter{secnumdepth}{0} % no section numbering\n\\setlength{\\parindent}{0pt} % no indentation\n\\setlength{\\topskip}{0pt} % no top skip\n\\setlength{\\columnsep}{0.15cm} % set column seperation\n((* if design.disable_page_numbering *))\n\\pagenumbering{gobble} % no page numbering\n((* else *))\n((* set page_numbering_style_placeholders = {\n    \"NAME\": cv.name,\n    \"PAGE_NUMBER\": \"\\\\thepage{}\",\n    \"TOTAL_PAGES\": \"\\pageref*{LastPage}\"\n} *))\n\\makeatletter\n\\let\\ps@customFooterStyle\\ps@plain % Copy the plain style to customFooterStyle\n\\patchcmd{\\ps@customFooterStyle}{\\thepage}{\n    \\color{gray}\\textit{\\small &lt;&lt;design.page_numbering_style|replace_placeholders_with_actual_values(page_numbering_style_placeholders)&gt;&gt;}\n}{}{} % replace number by desired string\n\\makeatother\n\\pagestyle{customFooterStyle}\n((* endif *))\n\n\\titleformat{\\section}{\\needspace{4\\baselineskip}\\bfseries\\large}{}{0pt}{}[\\vspace{1pt}\\titlerule]\n\n\\titlespacing{\\section}{\n    % left space:\n    -1pt\n}{\n    % top space:\n    &lt;&lt;design.margins.section_title.top&gt;&gt;\n}{\n    % bottom space:\n    &lt;&lt;design.margins.section_title.bottom&gt;&gt;\n} % section title spacing\n\n\\renewcommand\\labelitemi{$\\vcenter{\\hbox{\\small$\\bullet$}}$} % custom bullet points\n\\newenvironment{highlights}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=&lt;&lt;design.margins.highlights_area.left&gt;&gt; + 10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights\n\n\n\\newenvironment{highlightsforbulletentries}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights for bullet entries\n\n\\newenvironment{onecolentry}{\n    \\begin{adjustwidth}{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }\n}{\n    \\end{adjustwidth}\n} % new environment for one column entries\n\n\\newenvironment{twocolentry}[2][]{\n    \\onecolentry\n    \\def\\secondColumn{#2}\n    \\setcolumnwidth{\\fill, &lt;&lt;design.margins.entry_area.date_and_location_width&gt;&gt;}\n    \\begin{paracol}{2}\n}{\n    \\switchcolumn \\raggedleft \\secondColumn\n    \\end{paracol}\n    \\endonecolentry\n} % new environment for two column entries\n\n\\newenvironment{threecolentry}[3][]{\n    \\onecolentry\n    \\def\\thirdColumn{#3}\n    \\setcolumnwidth{&lt;&lt;design.margins.entry_area.education_degree_width&gt;&gt;, \\fill, &lt;&lt;design.margins.entry_area.date_and_location_width&gt;&gt;}\n    \\begin{paracol}{3}\n    {\\raggedright #2} \\switchcolumn\n}{\n    \\switchcolumn \\raggedleft \\thirdColumn\n    \\end{paracol}\n    \\endonecolentry\n} % new environment for three column entries\n\n\\newenvironment{header}{\n    \\setlength{\\topsep}{0pt}\\par\\kern\\topsep\\centering\\linespread{1.5}\n}{\n    \\par\\kern\\topsep\n} % new environment for the header\n\n((* set last_updated_date_style_placeholders = {\n    \"TODAY\": today,\n} *))\n\\newcommand{\\placelastupdatedtext}{% \\placetextbox{&lt;horizontal pos&gt;}{&lt;vertical pos&gt;}{&lt;stuff&gt;}\n  \\AddToShipoutPictureFG*{% Add &lt;stuff&gt; to current page foreground\n    \\put(\n        \\LenToUnit{\\paperwidth-&lt;&lt;design.margins.page.right&gt;&gt;-&lt;&lt;design.margins.entry_area.left_and_right&gt;&gt;+0.05cm},\n        \\LenToUnit{\\paperheight-&lt;&lt;design.margins.page.top|divide_length_by(2)&gt;&gt;}\n    ){\\vtop{{\\null}\\makebox[0pt][c]{\n        \\small\\color{gray}\\textit{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}\\hspace{\\widthof{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}}\n    }}}%\n  }%\n}%\n\n% save the original href command in a new command:\n\\let\\hrefWithoutArrow\\href\n\n% new command for external links:\n((* if not design.disable_external_link_icons *))\n\\renewcommand{\\href}[2]{\\hrefWithoutArrow{#1}{\\mbox{\\ifthenelse{\\equal{#2}{}}{ }{#2 }\\raisebox{.15ex}{\\footnotesize \\faExternalLink*}}}}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#publicationentry","title":"PublicationEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{samepage}\n    ((* if entry.date_string *))\n    \\begin{twocolentry}{\n        &lt;&lt;entry.date_string&gt;&gt;\n    }\n    ((* else *))\n    \\begin{onecolentry}\n    ((* endif *))\n        \\textbf{&lt;&lt;entry.title&gt;&gt;}\n\n        \\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\n        &lt;&lt;entry.authors|map(\"make_it_nolinebreak\")|join(\", \")&gt;&gt;\n    ((* if entry.date_string *))\n    \\end{twocolentry}\n    ((* else *))\n    \\end{onecolentry}\n    ((* endif *))\n\n\n    ((* if entry.doi or entry.journal *))\n    \\vspace{&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;}\n\n    \\begin{onecolentry}\n    ((* endif *))\n        ((* if entry.doi -*))\n        \\href{&lt;&lt;entry.doi_url&gt;&gt;}{&lt;&lt;entry.doi&gt;&gt;}\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)) (((* endif -*))\n        ((*- if entry.journal -*))\n        &lt;&lt;entry.journal&gt;&gt;\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)))((* endif -*))\n    ((* if entry.doi or entry.journal *))\n    \\end{onecolentry}\n    ((* endif *))\n\\end{samepage}\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#educationentry","title":"EducationEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n((* if entry.date_string *))\n\\begin{twocolentry}{\n    &lt;&lt;entry.date_string&gt;&gt;\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.institution&gt;&gt;}, ((* if entry.degree *))&lt;&lt;entry.degree&gt;&gt; in ((* endif *))&lt;&lt;entry.area&gt;&gt;((* if entry.location *)) -- &lt;&lt;entry.location&gt;&gt;((* endif *))\n((* if entry.date_string *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#bulletentry","title":"BulletEntry","text":"<pre><code>\\item &lt;&lt;entry.bullet&gt;&gt;\n</code></pre>"},{"location":"reference/themes/engineeringresumes/#normalentry","title":"NormalEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n((* if entry.date_string *))\n\\begin{twocolentry}{\n    &lt;&lt;entry.date_string&gt;&gt;\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.name&gt;&gt;}((* if entry.location *)) -- &lt;&lt;entry.location&gt;&gt;((* endif *))\n((* if entry.date_string *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/moderncv/","title":"Moderncv Theme","text":""},{"location":"reference/themes/moderncv/#onelineentry","title":"OneLineEntry","text":"<pre><code>\\cvline{&lt;&lt;entry.label&gt;&gt;}{&lt;&lt;entry.details&gt;&gt;}\n</code></pre>"},{"location":"reference/themes/moderncv/#textentry","title":"TextEntry","text":"<pre><code>\\cvline{}{&lt;&lt;entry&gt;&gt;}\n</code></pre>"},{"location":"reference/themes/moderncv/#sectionending","title":"SectionEnding","text":""},{"location":"reference/themes/moderncv/#experienceentry","title":"ExperienceEntry","text":"<pre><code>\\cventry{\n    ((*- if design.show_only_years *))&lt;&lt;-entry.date_string_only_years-&gt;&gt;((* else *))&lt;&lt;-entry.date_string-&gt;&gt;((* endif -*))\n}{\\textbf{&lt;&lt;entry.company&gt;&gt;}}{\n    &lt;&lt;-entry.position-&gt;&gt;\n}{\n    &lt;&lt;-entry.location-&gt;&gt;\n}{}{}\n((* for item in entry.highlights *))\n\\cvlistitem{&lt;&lt;item&gt;&gt;}\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/moderncv/#sectionbeginning","title":"SectionBeginning","text":"<pre><code>\\section{&lt;&lt;section_title&gt;&gt;}\n</code></pre>"},{"location":"reference/themes/moderncv/#header","title":"Header","text":"<pre><code>((* if cv.name is not none *))\n\\maketitle\n((* endif *))\n\n\n% save the original href command in a new command:\n\\let\\hrefWithoutArrow\\href\n % new command for external links:\n\\renewcommand{\\href}[2]{\\hrefWithoutArrow{#1}{\\mbox{\\color{color1} #2 \\raisebox{.15ex}{\\footnotesize \\faExternalLink*}}}}\n\n\\hypersetup{pdftitle={&lt;&lt;cv.name&gt;&gt;'s CV}}\n</code></pre>"},{"location":"reference/themes/moderncv/#preamble","title":"Preamble","text":"<pre><code>%% start of file `template.tex'.\n%% Copyright 2006-2015 Xavier Danaux (xdanaux@gmail.com), 2020-2022 moderncv maintainers (github.com/moderncv).\n%\n% This work may be distributed and/or modified under the\n% conditions of the LaTeX Project Public License version 1.3c,\n% available at http://www.latex-project.org/lppl/.\n\n\\documentclass[&lt;&lt;design.font_size&gt;&gt;,&lt;&lt;design.page_size&gt;&gt;,sans]{moderncv}        % possible options include font size ('10pt', '11pt' and '12pt'), paper size ('a4paper', 'letterpaper', 'a5paper', 'legalpaper', 'executivepaper' and 'landscape') and font family ('sans' and 'roman')\n\n% moderncv themes\n\\moderncvstyle{classic}                            % style options are 'casual' (default), 'classic', 'banking', 'oldstyle' and 'fancy'\n\\moderncvcolor{&lt;&lt;design.color&gt;&gt;}                               % color options 'black', 'blue' (default), 'burgundy', 'green', 'grey', 'orange', 'purple' and 'red'\n%\\renewcommand{\\familydefault}{\\sfdefault}         % to set the default font; use '\\sfdefault' for the default sans serif font, '\\rmdefault' for the default roman one, or any tex font name\n((* if design.disable_page_numbers *))\n\\nopagenumbers{}\n((* endif *))\n\n\\usepackage{amsmath} % for math\n\n% adjust the page margins\n\\usepackage[scale=&lt;&lt;design.content_scale&gt;&gt;]{geometry}\n\\setlength{\\hintscolumnwidth}{&lt;&lt;design.date_width&gt;&gt;}                % if you want to change the width of the column with the dates\n%\\setlength{\\makecvheadnamewidth}{10cm}            % for the 'classic' style, if you want to force the width allocated to your name and avoid line breaks. be careful though, the length is normally calculated to avoid any overlap with your personal info; use this at your own typographical risks...\n\n% font loading\n% for luatex and xetex, do not use inputenc and fontenc\n% see https://tex.stackexchange.com/a/496643\n\\ifxetexorluatex\n  \\usepackage{fontspec}\n  \\usepackage{unicode-math}\n  \\defaultfontfeatures{Ligatures=TeX}\n  \\setmainfont{Latin Modern Roman}\n  \\setsansfont{Latin Modern Sans}\n  \\setmonofont{Latin Modern Mono}\n  \\setmathfont{Latin Modern Math} \n\\else\n  \\usepackage[T1]{fontenc}\n  \\usepackage{lmodern}\n\\fi\n\n% document language\n\\usepackage[english]{babel}  % FIXME: using spanish breaks moderncv\n\n% personal data\n\\name{&lt;&lt;cv.name&gt;&gt;}{}\n((* if cv.label *))\n\\title{&lt;&lt;cv.label&gt;&gt;}                               % optional, remove / comment the line if not wanted\n((* endif *))\n% \\familyname{}\n((* if cv.location *))\n\\address{&lt;&lt;cv.location&gt;&gt;}{}\n((* endif *))\n((* if cv.phone *))\n\\phone[mobile]{&lt;&lt;cv.phone|replace(\"tel:\", \"\")|replace(\"-\",\" \")&gt;&gt;}\n((* endif *))\n((* if cv.email *))\n\\email{&lt;&lt;cv.email|escape_latex_characters&gt;&gt;}\n((* endif *))\n((* if cv.website *))\n\\homepage{&lt;&lt;cv.website|replace(\"https://\", \"\")|reverse|replace(\"/\", \"\", 1)|reverse&gt;&gt;}\n((* endif *))\n\n((* if cv.social_networks *))\n    ((* for network in cv.social_networks *))\n\\social[&lt;&lt;network.network|lower()&gt;&gt;]{&lt;&lt;network.username&gt;&gt;}\n    ((* endfor *))\n((* endif *))\n% Social icons\n% \\social[linkedin]{john.doe}                        % optional, remove / comment the line if not wanted\n% \\social[xing]{john\\_doe}                           % optional, remove / comment the line if not wanted\n% \\social[twitter]{ji\\_doe}                             % optional, remove / comment the line if not wanted\n% \\social[github]{jdoe}                              % optional, remove / comment the line if not wanted\n% \\social[gitlab]{jdoe}                              % optional, remove / comment the line if not wanted\n% \\social[stackoverflow]{0000000/johndoe}            % optional, remove / comment the line if not wanted\n% \\social[bitbucket]{jdoe}                           % optional, remove / comment the line if not wanted\n% \\social[skype]{jdoe}                               % optional, remove / comment the line if not wanted\n% \\social[orcid]{0000-0000-000-000}                  % optional, remove / comment the line if not wanted\n% \\social[researchgate]{jdoe}                        % optional, remove / comment the line if not wanted\n% \\social[researcherid]{jdoe}                        % optional, remove / comment the line if not wanted\n% \\social[telegram]{jdoe}                            % optional, remove / comment the line if not wanted\n% \\social[whatsapp]{12345678901}                     % optional, remove / comment the line if not wanted\n% \\social[signal]{12345678901}                       % optional, remove / comment the line if not wanted\n% \\social[matrix]{@johndoe:matrix.org}               % optional, remove / comment the line if not wanted\n% \\social[googlescholar]{googlescholarid}            % optional, remove / comment the line if not wanted\n\n% new command for cventry (this is done to allow users unbold or unitalicize the text in the cventry command)\n\\renewcommand*{\\cventry}[6][.25em]{%\n  \\cvitem[#1]{#2}{%\n    #3%\n    \\ifthenelse{\\equal{#4}{}}{}{, #4}%\n    \\ifthenelse{\\equal{#5}{}}{}{, #5}%\n    \\ifthenelse{\\equal{#6}{}}{}{, #6}%\n  }\n}\n</code></pre>"},{"location":"reference/themes/moderncv/#publicationentry","title":"PublicationEntry","text":"<pre><code>\\cventry{\n    ((*- if design.show_only_years *))&lt;&lt;-entry.date_string_only_years-&gt;&gt;((* else *))&lt;&lt;-entry.date_string-&gt;&gt;((* endif -*))\n}{\\textbf{&lt;&lt;entry.title&gt;&gt;}}{\n    &lt;&lt;-entry.journal-&gt;&gt;\n}{\n((*- if entry.doi -*))\\href{&lt;&lt;entry.doi_url&gt;&gt;}{&lt;&lt;entry.doi&gt;&gt;}((*- endif -*))\n}{}{}\n\\cvline{}{\\small &lt;&lt;entry.authors|map(\"make_it_nolinebreak\")|join(\", \")&gt;&gt;}\n</code></pre>"},{"location":"reference/themes/moderncv/#educationentry","title":"EducationEntry","text":"<pre><code>\\cventry{\n    ((*- if design.show_only_years *))&lt;&lt;-entry.date_string_only_years-&gt;&gt;((* else *))&lt;&lt;-entry.date_string-&gt;&gt;((* endif -*))\n}{\\textbf{&lt;&lt;entry.institution&gt;&gt;}}{\n((*- if entry.degree *))&lt;&lt;entry.degree&gt;&gt; in ((* endif *))&lt;&lt;entry.area-&gt;&gt;\n}{\n    &lt;&lt;-entry.location-&gt;&gt;\n}{}{}\n((* for item in entry.highlights *))\n\\cvlistitem{&lt;&lt;item&gt;&gt;}\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/moderncv/#bulletentry","title":"BulletEntry","text":"<pre><code>\\cvlistitem{&lt;&lt;entry.bullet&gt;&gt;}\n</code></pre>"},{"location":"reference/themes/moderncv/#normalentry","title":"NormalEntry","text":"<pre><code>\\cventry{\n    ((*- if design.show_only_years *))&lt;&lt;-entry.date_string_only_years-&gt;&gt;((* else *))&lt;&lt;-entry.date_string-&gt;&gt;((* endif -*))\n}{\n    &lt;&lt;-entry.name-&gt;&gt;\n}{\n    &lt;&lt;-entry.location-&gt;&gt;\n}{}{}{}\n((* for item in entry.highlights *))\n\\cvlistitem{&lt;&lt;item&gt;&gt;}\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/sb2nov/","title":"Sb2nov Theme","text":""},{"location":"reference/themes/sb2nov/#onelineentry","title":"OneLineEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    \\textbf{&lt;&lt;entry.label&gt;&gt;:} &lt;&lt;entry.details&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/sb2nov/#textentry","title":"TextEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;}\n((* endif *))\n\n\\begin{onecolentry}\n    &lt;&lt;entry&gt;&gt;\n\\end{onecolentry}\n</code></pre>"},{"location":"reference/themes/sb2nov/#sectionending","title":"SectionEnding","text":"<pre><code>((* if entry_type == \"BulletEntry\" *))\n    \\end{highlightsforbulletentries}\n\\end{onecolentry}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#experienceentry","title":"ExperienceEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;-3px}\n((* endif *))\n\n((* if entry.date_string or entry.location *))\n\\begin{twocolentry}{\n    ((* if entry.location *))\\textit{&lt;&lt;entry.location&gt;&gt;}((* endif *))\n\n\n    ((* if entry.date_string *))\\textit{&lt;&lt;entry.date_string&gt;&gt;}((* endif *))\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.position&gt;&gt;}\n\n    \\textit{&lt;&lt;entry.company&gt;&gt;}\n((* if entry.date_string or entry.location *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;-3px}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#sectionbeginning","title":"SectionBeginning","text":"<pre><code>\\section{&lt;&lt;section_title&gt;&gt;}\n\n((* if entry_type == \"BulletEntry\" *))\n\\begin{onecolentry}\n    \\begin{highlightsforbulletentries}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#header","title":"Header","text":"<pre><code>((* if not design.disable_last_updated_date *))\n\\placelastupdatedtext\n((* endif *))\n((* if cv.name is not none *))\n\\begin{header}\n    \\textbf{\\fontsize{&lt;&lt;design.header_font_size&gt;&gt;}{&lt;&lt;design.header_font_size&gt;&gt;}\\selectfont &lt;&lt;cv.name&gt;&gt;}\n\n    \\vspace{&lt;&lt;design.margins.header.vertical_between_name_and_connections&gt;&gt;}\n\n    \\normalsize\n    ((* for connection in cv.connections *))\n    \\mbox{((*- if connection[\"url\"] -*))\n        \\hrefWithoutArrow{&lt;&lt;connection[\"url\"]&gt;&gt;}{\\color{black}{\\footnotesize&lt;&lt;connection[\"latex_icon\"]&gt;&gt;}\\hspace*{0.13cm}&lt;&lt;connection[\"placeholder\"]|escape_latex_characters&gt;&gt;}\n        ((*- else -*))\n        {\\color{black}{\\footnotesize&lt;&lt;connection[\"latex_icon\"]&gt;&gt;}\\hspace*{0.13cm}&lt;&lt;connection[\"placeholder\"]|escape_latex_characters&gt;&gt;}\n        ((*- endif -*))}\n    \\kern &lt;&lt;design.margins.header.horizontal_between_connections&gt;&gt;\n    ((* endfor *))\n\\end{header}\n\n\\vspace{&lt;&lt;design.margins.header.bottom&gt;&gt; - &lt;&lt;design.margins.section_title.top&gt;&gt;}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#preamble","title":"Preamble","text":"<pre><code>\\documentclass[&lt;&lt;design.font_size&gt;&gt;, &lt;&lt;design.page_size&gt;&gt;]{article}\n\n% Packages:\n\\usepackage[\n    ignoreheadfoot, % set margins without considering header and footer\n    top=&lt;&lt;design.margins.page.top&gt;&gt;, % seperation between body and page edge from the top\n    bottom=&lt;&lt;design.margins.page.bottom&gt;&gt;, % seperation between body and page edge from the bottom\n    left=&lt;&lt;design.margins.page.left&gt;&gt;, % seperation between body and page edge from the left\n    right=&lt;&lt;design.margins.page.right&gt;&gt;, % seperation between body and page edge from the right\n    footskip=&lt;&lt;design.margins.page.bottom|divide_length_by(2)&gt;&gt;, % seperation between body and footer\n    % showframe % for debugging \n]{geometry} % for adjusting page geometry\n\\usepackage{titlesec} % for customizing section titles\n\\usepackage{tabularx} % for making tables with fixed width columns\n\\usepackage{array} % tabularx requires this\n\\usepackage[dvipsnames]{xcolor} % for coloring text\n\\definecolor{primaryColor}{RGB}{&lt;&lt;design.color.as_rgb_tuple()|join(\", \")&gt;&gt;} % define primary color\n\\usepackage{enumitem} % for customizing lists\n\\usepackage{fontawesome5} % for using icons\n\\usepackage{amsmath} % for math\n\\usepackage[\n    pdftitle={&lt;&lt;cv.name&gt;&gt;'s CV},\n    pdfauthor={&lt;&lt;cv.name&gt;&gt;},\n    colorlinks=true,\n    urlcolor=primaryColor\n]{hyperref} % for links, metadata and bookmarks\n\\usepackage[pscoord]{eso-pic} % for floating text on the page\n\\usepackage{calc} % for calculating lengths\n\\usepackage{bookmark} % for bookmarks\n\\usepackage{lastpage} % for getting the total number of pages\n\\usepackage{changepage} % for one column entries (adjustwidth environment)\n\\usepackage{paracol} % for two and three column entries\n\\usepackage{ifthen} % for conditional statements\n\\usepackage{needspace} % for avoiding page brake right after the section title\n\\usepackage{iftex} % check if engine is pdflatex, xetex or luatex\n\n% Ensure that generate pdf is machine readable/ATS parsable:\n\\ifPDFTeX\n    \\input{glyphtounicode}\n    \\pdfgentounicode=1\n    % \\usepackage[T1]{fontenc} % this breaks sb2nov\n    \\usepackage[utf8]{inputenc}\n    \\usepackage{lmodern}\n\\fi\n\n((* if design.font == \"Latin Modern Serif\" *))\n\n((* elif design.font == \"Latin Modern Sans Serif\" *))\n\\renewcommand{\\familydefault}{\\sfdefault}\n((* elif design.font == \"Latin Modern Mono\" *))\n\\renewcommand{\\familydefault}{\\ttdefault}\n((* elif design.font == \"Source Sans 3\" *))\n\\usepackage[default, type1]{sourcesanspro} \n((* elif design.font == \"Charter\" *))\n\\usepackage{charter}\n((* endif *))\n\n% Some settings:\n((* if design.text_alignment == \"justified-with-no-hyphenation\" *))\n\\usepackage[none]{hyphenat}\n\\sloppy\n((* elif design.text_alignment == \"left-aligned\" *))\n\\raggedright\n((* endif *))\n\\AtBeginEnvironment{adjustwidth}{\\partopsep0pt} % remove space before adjustwidth environment\n\\pagestyle{empty} % no header or footer\n\\setcounter{secnumdepth}{0} % no section numbering\n\\setlength{\\parindent}{0pt} % no indentation\n\\setlength{\\topskip}{0pt} % no top skip\n\\setlength{\\columnsep}{0cm} % set column seperation\n((* if design.disable_page_numbering *))\n\\pagenumbering{gobble} % no page numbering\n((* else *))\n((* set page_numbering_style_placeholders = {\n    \"NAME\": cv.name,\n    \"PAGE_NUMBER\": \"\\\\thepage{}\",\n    \"TOTAL_PAGES\": \"\\pageref*{LastPage}\"\n} *))\n\\makeatletter\n\\let\\ps@customFooterStyle\\ps@plain % Copy the plain style to customFooterStyle\n\\patchcmd{\\ps@customFooterStyle}{\\thepage}{\n    \\color{gray}\\textit{\\small &lt;&lt;design.page_numbering_style|replace_placeholders_with_actual_values(page_numbering_style_placeholders)&gt;&gt;}\n}{}{} % replace number by desired string\n\\makeatother\n\\pagestyle{customFooterStyle}\n((* endif *))\n\n\\titleformat{\\section}{\\needspace{4\\baselineskip}\\bfseries\\large}{}{0pt}{}[\\vspace{1pt}\\titlerule]\n\n\\titlespacing{\\section}{\n    % left space:\n    -1pt\n}{\n    % top space:\n    &lt;&lt;design.margins.section_title.top&gt;&gt;\n}{\n    % bottom space:\n    &lt;&lt;design.margins.section_title.bottom&gt;&gt;\n} % section title spacing\n\n\\renewcommand\\labelitemi{$\\circ$} % custom bullet points\n\\newenvironment{highlights}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=&lt;&lt;design.margins.highlights_area.left&gt;&gt; + 10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights\n\n\\newenvironment{highlightsforbulletentries}{\n    \\begin{itemize}[\n        topsep=&lt;&lt;design.margins.highlights_area.top&gt;&gt;,\n        parsep=&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;,\n        partopsep=0pt,\n        itemsep=0pt,\n        leftmargin=10pt\n    ]\n}{\n    \\end{itemize}\n} % new environment for highlights for bullet entries\n\n\n\\newenvironment{onecolentry}{\n    \\begin{adjustwidth}{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }{\n        &lt;&lt;design.margins.entry_area.left_and_right&gt;&gt; + 0.00001 cm\n    }\n}{\n    \\end{adjustwidth}\n} % new environment for one column entries\n\n\\newenvironment{twocolentry}[2][]{\n    \\onecolentry\n    \\def\\secondColumn{#2}\n    \\setcolumnwidth{\\fill, &lt;&lt;design.margins.entry_area.date_and_location_width&gt;&gt;}\n    \\begin{paracol}{2}\n}{\n    \\switchcolumn \\raggedleft \\secondColumn\n    \\end{paracol}\n    \\endonecolentry\n} % new environment for two column entries\n\n\\newenvironment{header}{\n    \\setlength{\\topsep}{0pt}\\par\\kern\\topsep\\centering\\linespread{1.5}\n}{\n    \\par\\kern\\topsep\n} % new environment for the header\n\n((* set last_updated_date_style_placeholders = {\n    \"TODAY\": today,\n} *))\n\\newcommand{\\placelastupdatedtext}{% \\placetextbox{&lt;horizontal pos&gt;}{&lt;vertical pos&gt;}{&lt;stuff&gt;}\n  \\AddToShipoutPictureFG*{% Add &lt;stuff&gt; to current page foreground\n    \\put(\n        \\LenToUnit{\\paperwidth-&lt;&lt;design.margins.page.right&gt;&gt;-&lt;&lt;design.margins.entry_area.left_and_right&gt;&gt;+0.05cm},\n        \\LenToUnit{\\paperheight-&lt;&lt;design.margins.page.top|divide_length_by(2)&gt;&gt;}\n    ){\\vtop{{\\null}\\makebox[0pt][c]{\n        \\small\\color{gray}\\textit{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}\\hspace{\\widthof{&lt;&lt;design.last_updated_date_style|replace_placeholders_with_actual_values(last_updated_date_style_placeholders)&gt;&gt;}}\n    }}}%\n  }%\n}%\n\n% save the original href command in a new command:\n\\let\\hrefWithoutArrow\\href\n\n% new command for external links:\n((* if not design.disable_external_link_icons *))\n\\renewcommand{\\href}[2]{\\hrefWithoutArrow{#1}{\\mbox{\\ifthenelse{\\equal{#2}{}}{ }{#2 }\\raisebox{.15ex}{\\footnotesize \\faExternalLink*}}}}\n((* endif *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#publicationentry","title":"PublicationEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;-3px}\n((* endif *))\n\n\\begin{samepage}\n    ((* if entry.date_string *))\n    \\begin{twocolentry}{\n        &lt;&lt;entry.date_string&gt;&gt;\n    }\n    ((* else *))\n    \\begin{onecolentry}\n    ((* endif *))\n        \\textbf{&lt;&lt;entry.title&gt;&gt;}\n\n        \\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;}\n\n        &lt;&lt;entry.authors|map(\"make_it_nolinebreak\")|join(\", \")&gt;&gt;\n    ((* if entry.date_string *))\n    \\end{twocolentry}\n    ((* else *))\n    \\end{onecolentry}\n    ((* endif *))\n\n\n    ((* if entry.doi or entry.journal *))\n    \\vspace{&lt;&lt;design.margins.highlights_area.vertical_between_bullet_points&gt;&gt;-3px}\n\n    \\begin{onecolentry}\n    ((* endif *))\n        ((* if entry.doi -*))\n        \\href{&lt;&lt;entry.doi_url&gt;&gt;}{&lt;&lt;entry.doi&gt;&gt;}\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)) (((* endif -*))\n        ((*- if entry.journal -*))\n        &lt;&lt;entry.journal&gt;&gt;\n        ((*- endif -*))\n        ((*- if entry.doi and entry.journal *)))((* endif -*))\n    ((* if entry.doi or entry.journal *))\n    \\end{onecolentry}\n    ((* endif *))\n\\end{samepage}\n</code></pre>"},{"location":"reference/themes/sb2nov/#educationentry","title":"EducationEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;-3px}\n((* endif *))\n\n((* if entry.date_string or entry.location *))\n\\begin{twocolentry}{\n    ((* if entry.location *))\\textit{&lt;&lt;entry.location&gt;&gt;}((* endif *))\n\n\n    ((* if entry.date_string *))\\textit{&lt;&lt;entry.date_string&gt;&gt;}((* endif *))\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.institution&gt;&gt;}\n\n    \\textit{((* if entry.degree *))&lt;&lt;entry.degree&gt;&gt; in ((* endif *))&lt;&lt;entry.area&gt;&gt;}\n((* if entry.date_string or entry.location *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;-3px}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"reference/themes/sb2nov/#bulletentry","title":"BulletEntry","text":"<pre><code>\\item &lt;&lt;entry.bullet&gt;&gt;\n</code></pre>"},{"location":"reference/themes/sb2nov/#normalentry","title":"NormalEntry","text":"<pre><code>((* if not is_first_entry *))\n\\vspace{&lt;&lt;design.margins.entry_area.vertical_between&gt;&gt;-3px}\n((* endif *))\n\n((* if entry.date_string or entry.location *))\n\\begin{twocolentry}{\n    ((* if entry.location *))\\textit{&lt;&lt;entry.location&gt;&gt;}((* endif *))\n\n\n    ((* if entry.date_string *))\\textit{&lt;&lt;entry.date_string&gt;&gt;}((* endif *))\n}\n((* else *))\n\\begin{onecolentry}\n((* endif *))\n    \\textbf{&lt;&lt;entry.name&gt;&gt;}\n((* if entry.date_string or entry.location *))\n\\end{twocolentry}\n((* else *))\n\\end{onecolentry}\n((* endif *))\n\n((* for item in entry.highlights *))\n    ((* if loop.first *))\n\\vspace{&lt;&lt;design.margins.highlights_area.top&gt;&gt;-3px}\n\\begin{onecolentry}\n    \\begin{highlights}\n    ((* endif *))\n        \\item &lt;&lt;item&gt;&gt;\n    ((* if loop.last *))\n    \\end{highlights}\n\\end{onecolentry}\n    ((* endif *))\n((* endfor *))\n</code></pre>"},{"location":"user_guide/","title":"User Guide","text":"<p>This document provides everything you need to know about the usage of RenderCV.</p>"},{"location":"user_guide/#installation","title":"Installation","text":"<p>RenderCV doesn't require a $\\LaTeX$ installation; it comes with it!</p> <ol> <li> <p>Install Python (3.10 or newer).</p> </li> <li> <p>Run the command below to install RenderCV.</p> </li> </ol> <pre><code>pip install rendercv\n</code></pre>"},{"location":"user_guide/#getting-started-with-the-new-command","title":"Getting started with the <code>new</code> command","text":"<p>To get started, navigate to the directory where you want to create your CV and run the command below to create the input files.</p> <p><pre><code>rendercv new \"Your Full Name\"\n</code></pre> This command will create the following files:</p> <ul> <li> <p>A YAML input file called <code>Your_Name_CV.yaml</code>.</p> <p>This file will contain all the content and design options of your CV.</p> </li> <li> <p>A directory called <code>classic</code>.</p> <p>This directory contains the $\\LaTeX$ source code of RenderCV's default built-in theme, <code>classic</code>. You can update its contents to tweak the appearance of the output PDF file.</p> </li> <li> <p>A directory called <code>markdown</code>.</p> <p>This directory contains the Markdown source code of RenderCV's default Markdown template. You can update its contents to tweak the Markdown output of the CV.</p> </li> </ul>"},{"location":"user_guide/#options-of-the-new-command","title":"Options of the <code>new</code> command","text":"<p>The <code>new</code> command has some options:</p> <ul> <li> <p><code>--theme \"THEME_NAME\"</code>: Generates files for a specific built-in theme, instead of the default <code>classic</code> theme. Currently, the available themes are: <code>classic</code>, <code>moderncv</code>, <code>sb2nov</code>, <code>engineeringresumes</code>.  <pre><code>rendercv new \"Your Full Name\" --theme \"THEME_NAME\" \n</code></pre></p> </li> <li> <p><code>--dont-create-theme-source-files</code>: Prevents the creation of the theme source files. By default, the theme source files are created. <pre><code>rendercv new \"Your Full Name\" --dont-create-theme-source-files\n</code></pre></p> </li> <li> <p><code>--dont-create-markdown-source-files</code>: Prevents the creation of the Markdown source files. By default, the Markdown source files are created. <pre><code>rendercv new \"Your Full Name\" --dont-create-markdown-source-files\n</code></pre></p> </li> </ul>"},{"location":"user_guide/#structure-of-the-yaml-input-file","title":"Structure of the YAML input file","text":"<p>The YAML input file contains all the content and design options of your CV. A detailed explanation of the structure of the YAML input file is provided here.</p>"},{"location":"user_guide/#rendering-the-cv-with-the-render-command","title":"Rendering the CV with the <code>render</code> command","text":"<p>To render a YAML input file, run the command below.</p> <pre><code>rendercv render \"Your_Name_CV.yaml\"\n</code></pre> <p>This command will generate a directory called <code>rendercv_output</code>, which contains the following files:</p> <ul> <li>The CV in PDF format, <code>Your_Name_CV.pdf</code>.</li> <li>$\\LaTeX$ source code of the PDF file, <code>Your_Name_CV.tex</code>.</li> <li>PNG files for each page of the PDF file.</li> <li>The CV in Markdown format, <code>Your_Name_CV.md</code>.</li> <li> <p>An HTML file from the Markdown file, <code>Your_Name_CV_PASTETOGRAMMARLY.html</code>.</p> <p>This file is generated so that it can be opened in a browser and pasted into Grammarly or similar tools for spell and grammar checking.</p> </li> <li> <p>Some log and auxiliary files related to the $\\LaTeX$ compilation process.</p> </li> </ul> <p>If the theme and Markdown source files are found in the directory, they will override the default built-in theme and Markdown template. You don't need to provide all the source files; you can just provide the ones you want to override.</p>"},{"location":"user_guide/#options-of-the-render-command","title":"Options of the <code>render</code> command","text":"<p>The <code>render</code> command has some options:</p> <ul> <li><code>--use-local-latex-command \"LATEX_COMMAND\"</code>: Generates the CV with the local $\\LaTeX$ installation, i.e., runs <code>LATEX_COMMAND</code>. By default, RenderCV uses its own TinyTeX distribution. <pre><code>rendercv render \"Your_Name_CV.yaml\" --use-local-latex-command \"pdflatex\" \n</code></pre></li> <li> <p><code>--output-folder-name \"OUTPUT_FOLDER_NAME\"</code>: Generates the output files in a folder with the given name. By default, the output folder name is <code>rendercv_output</code>. The output folder will be created in the current working directory. <pre><code>rendercv render \"Your_Name_CV.yaml\" --output-folder-name \"OUTPUT_FOLDER_NAME\"\n</code></pre></p> </li> <li> <p><code>--latex-path LATEX_PATH</code>: Copies the generated $\\LaTeX$ source code from the output folder and pastes it to the specified path. <pre><code>rendercv render \"Your_Name_CV.yaml\" --latex-path \"PATH\"\n</code></pre></p> </li> <li> <p><code>--pdf-path PDF_PATH</code>: Copies the generated PDF file from the output folder and pastes it to the specified path. <pre><code>rendercv render \"Your_Name_CV.yaml\" --pdf-path \"PATH\"\n</code></pre></p> </li> <li> <p><code>--markdown-path MARKDOWN_PATH</code>: Copies the generated Markdown file from the output folder and pastes it to the specified path. <pre><code>rendercv render \"Your_Name_CV.yaml\" --markdown-path \"PATH\"\n</code></pre></p> </li> <li> <p><code>--html-path HTML_PATH</code>: Copies the generated HTML file from the output folder and pastes it to the specified path. <pre><code>rendercv render \"Your_Name_CV.yaml\" --html-path \"PATH\"\n</code></pre></p> </li> <li> <p><code>--png-path PNG_PATH</code>: Copies the generated PNG files from the output folder and pastes them to the specified path. <pre><code>rendercv render \"Your_Name_CV.yaml\" --png-path \"PATH\"\n</code></pre></p> </li> <li> <p><code>--dont-generate-markdown</code>: Prevents the generation of the Markdown file. <pre><code>rendercv render \"Your_Name_CV.yaml\" --dont-generate-markdown\n</code></pre></p> </li> <li> <p><code>--dont-generate-html</code>: Prevents the generation of the HTML file. <pre><code>rendercv render \"Your_Name_CV.yaml\" --dont-generate-html\n</code></pre></p> </li> <li> <p><code>--dont-generate-png</code>: Prevents the generation of the PNG files. <pre><code>rendercv render \"Your_Name_CV.yaml\" --dont-generate-png\n</code></pre></p> </li> <li> <p><code>--ANY.LOCATION.IN.THE.YAML.FILE \"VALUE\"</code>: Overrides the value of <code>ANY.LOCATION.IN.THE.YAML.FILE</code> with <code>VALUE</code>. This option can be used to avoid storing sensitive information in the YAML file. Sensitive information, like phone numbers, can be passed as a command-line argument with environment variables. This method is also beneficial for creating multiple CVs using the same YAML file by changing only a few values. Here are a few examples: <pre><code>rendercv render \"Your_Name_CV.yaml\" --cv.phone \"+905555555555\"\n</code></pre> <pre><code>rendercv render \"Your_Name_CV.yaml\" --cv.sections.education.1.institution \"Your University\"\n</code></pre></p> <p>Multiple <code>--ANY.LOCATION.IN.THE.YAML.FILE \"VALUE\"</code> options can be used in the same command.</p> </li> </ul>"},{"location":"user_guide/#creating-custom-themes-with-the-create-theme-command","title":"Creating custom themes with the <code>create-theme</code> command","text":"<p>RenderCV is a general $\\LaTeX$ CV framework. It allows you to use any $\\LaTeX$ code to generate your CVs. To begin developing a custom theme, run the command below.</p> <pre><code>rendercv create-theme \"mycustomtheme\"\n</code></pre> <p>This command will create a directory called <code>mycustomtheme</code>, which contains the following files:</p> <pre><code>\u251c\u2500\u2500 mycustomtheme\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 Preamble.j2.tex\n\u2502   \u251c\u2500\u2500 Header.j2.tex\n\u2502   \u251c\u2500\u2500 EducationEntry.j2.tex\n\u2502   \u251c\u2500\u2500 ExperienceEntry.j2.tex\n\u2502   \u251c\u2500\u2500 NormalEntry.j2.tex\n\u2502   \u251c\u2500\u2500 OneLineEntry.j2.tex\n\u2502   \u251c\u2500\u2500 PublicationEntry.j2.tex\n\u2502   \u251c\u2500\u2500 TextEntry.j2.tex\n\u2502   \u251c\u2500\u2500 SectionBeginning.j2.tex\n\u2502   \u2514\u2500\u2500 SectionEnding.j2.tex\n\u2514\u2500\u2500 Your_Full_Name_CV.yaml\n</code></pre> <p>The files are copied from the <code>classic</code> theme. You can update the contents of these files to create your custom theme.</p> <p>Each of these <code>*.j2.tex</code> files is $\\LaTeX$ code with some Python in it. These files allow RenderCV to create your CV out of the YAML input.</p> <p>The best way to understand how they work is to look at the source code of built-in themes:</p> <ul> <li><code>classic</code> templates</li> <li><code>engineeringresumes</code> templates</li> <li><code>sb2nov</code> templates</li> <li><code>moderncv</code> templates</li> </ul> <p>For example, the content of <code>ExperienceEntry.j2.tex</code> for the <code>moderncv</code> theme is shown below:</p> <pre><code>\\cventry{\n    ((* if design.show_only_years *))\n    &lt;&lt;entry.date_string_only_years&gt;&gt;\n    ((* else *))\n    &lt;&lt;entry.date_string&gt;&gt;\n    ((* endif *))\n}{\n    &lt;&lt;entry.position&gt;&gt;\n}{\n    &lt;&lt;entry.company&gt;&gt;\n}{\n    &lt;&lt;entry.location&gt;&gt;\n}{}{}\n((* for item in entry.highlights *))\n\\cvline{}{\\small &lt;&lt;item&gt;&gt;}\n((* endfor *))\n</code></pre> <p>The values between <code>&lt;&lt;</code> and <code>&gt;&gt;</code> are the names of Python variables, allowing you to write a $\\LaTeX$ CV without writing any content. They will be replaced with the values found in the YAML input. Also, the values between <code>((*</code> and <code>*))</code> are Python blocks, allowing you to use loops and conditional statements.</p> <p>The process of generating $\\LaTeX$ files like this is called \"templating,\" and it's achieved with a Python package called Jinja.</p> <p>Also, the <code>__init__.py</code> file found in the theme directory is used to define the design options of the custom theme. You can define your custom design options in this file.</p> <p>For example, an <code>__init__.py</code> file is shown below:</p> <pre><code>from typing import Literal\n\nimport pydantic\n\nclass YourcustomthemeThemeOptions(pydantic.BaseModel):\n    theme: Literal[\"yourcustomtheme\"]\n    option1: str\n    option2: str\n    option3: int\n    option4: bool\n</code></pre> <p>Then, RenderCV will parse your custom design options from the YAML input, and you can use these variables inside your <code>*.j2.tex</code> files as shown below:</p> <pre><code>&lt;&lt;design.option1&gt;&gt;\n&lt;&lt;design.option2&gt;&gt;\n((* if design.option4 *))\n    &lt;&lt;design.option3&gt;&gt;\n((* endif *))\n</code></pre>"},{"location":"user_guide/#options-of-the-create-theme-command","title":"Options of the <code>create-theme</code> command","text":"<p>The <code>create-theme</code> command has some options:</p> <ul> <li><code>--based-on \"THEME_NAME\"</code>: Generates a custom theme based on the specified built-in theme, instead of the default <code>classic</code> theme. Currently, the available themes are: <code>classic</code>, <code>moderncv</code>, <code>sb2nov</code>, <code>engineeringresumes</code>.  <pre><code>rendercv create-theme \"mycustomtheme\" --based-on \"THEME_NAME\"\n</code></pre></li> </ul>"},{"location":"user_guide/#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"user_guide/#can-i-use-custom-fonts","title":"Can I use custom fonts?","text":"<p>To be answered.</p>"},{"location":"user_guide/#can-i-add-a-background-image","title":"Can I add a background image?","text":"<p>To be answered.</p>"},{"location":"user_guide/#how-good-is-it-in-terms-of-parseability-by-ats","title":"How good is it in terms of parseability by ATS?","text":"<p>To be answered.</p>"},{"location":"user_guide/#how-to-add-links","title":"How to add links?","text":"<p>To be answered.</p>"},{"location":"user_guide/#how-to-use-greek-letters","title":"How to use Greek letters?","text":"<p>To be answered.</p>"},{"location":"user_guide/#can-i-add-a-profile-picture","title":"Can I add a profile picture?","text":"<p>To be answered.</p>"},{"location":"user_guide/#how-can-i-switch-the-order-of-company-and-position-in-experienceentry","title":"How can I switch the order of <code>company</code> and <code>position</code> in ExperienceEntry?","text":"<p>To be answered.</p>"},{"location":"user_guide/structure_of_the_yaml_input_file/","title":"Structure of the YAML Input File","text":"<p>RenderCV's input file consists of three parts: <code>cv</code>, <code>design</code>, and <code>locale_catalog</code>.</p> Your_Name_CV.yaml<pre><code>cv:\n  ...\n  YOUR CONTENT\n  ...\ndesign:\n  ...\n  YOUR DESIGN\n  ...\nlocale_catalog:\n  ...\n  TRANSLATIONS TO YOUR LANGUAGE\n  ...\n</code></pre> <ul> <li>The <code>cv</code> section is mandatory. It contains the content of the CV.</li> <li>The <code>design</code> section is optional. It contains the design options of the CV. If you don't provide a <code>design</code> section, RenderCV will use the default design options with the <code>classic</code> theme.</li> <li>The <code>locale_catalog</code> section is optional. You can provide translations for some of the strings used in the CV, for example, month abbreviations. RenderCV will use English strings if you don't provide a <code>locale_catalog</code> section.</li> </ul> <p>Tip</p> <p>To maximize your productivity while editing the input YAML file, set up RenderCV's JSON Schema in your IDE. It will validate your inputs on the fly and give auto-complete suggestions.</p> Visual Studio CodeOther <ol> <li>Install YAML language support extension.</li> <li>Then the Schema will be automatically set up because the file ends with <code>_CV.yaml</code>.</li> <li>Press <code>Ctrl + Space</code> to see the auto-complete suggestions.</li> </ol> <ol> <li>Ensure your editor of choice has support for JSON Schema.</li> <li> <p>Add the following line at the top of <code>Your_Name_CV.yaml</code>:</p> <pre><code># yaml-language-server: $schema=https://github.com/sinaatalay/rendercv/blob/main/schema.json?raw=true\n</code></pre> </li> <li> <p>Press <code>Ctrl + Space</code> to see the auto-complete suggestions.</p> </li> </ol>"},{"location":"user_guide/structure_of_the_yaml_input_file/#cv-section-of-the-yaml-input","title":"\"<code>cv</code>\" section of the YAML input","text":"<p>The <code>cv</code> section of the YAML input starts with generic information, as shown below.</p> <pre><code>cv:\n  name: John Doe\n  label: Mechanical Engineer\n  location: Your Location\n  email: youremail@yourdomain.com\n  phone: +905419999999\n  website: https://example.com/\n  social_networks:\n    - network: LinkedIn # (1)!\n      username: yourusername\n    - network: GitHub \n      username: yourusername\n  ...\n</code></pre> <ol> <li>The available social networks are: <code>LinkedIn</code>, <code>GitHub</code>, <code>GitLab</code>, <code>Instagram</code>, <code>Orcid</code>, <code>Mastodon</code>, <code>Twitter</code>, <code>StackOverflow</code>, <code>ResearchGate</code>, <code>YouTube</code>. You can add more social networks by following the same pattern. The social network icons are automatically added to the header of the CV.</li> </ol> <p>None of the values above are required. You can omit any or all of them, and RenderCV will adapt to your input. These generic fields are used in the header of the CV.</p> <p>The main content of your CV is stored in a field called <code>sections</code>.</p> <pre><code>cv:\n  name: John Doe\n  location: Your Location\n  email: youremail@yourdomain.com\n  phone: tel:+90-541-999-99-99\n  website: https://yourwebsite.com/\n  social_networks:\n    - network: LinkedIn\n      username: yourusername\n    - network: GitHub\n      username: yourusername\n  sections:\n    ...\n    YOUR CONTENT\n    ...\n</code></pre> <p>The <code>sections</code> field is a dictionary where the keys are the section titles, and the values are lists. Each item of the list is an entry for that section.</p> <p>Here is an example:</p> <pre><code>cv:\n  sections:\n    this_is_a_section_title:\n      - This is a TextEntry.\n      - This is another TextEntry under the same section.\n      - This is another another TextEntry under the same section.\n    this_is_another_section_title:\n      - company: This time it's an ExperienceEntry.\n        position: Your position\n        start_date: 2019-01-01\n        end_date: 2020-01\n        location: TX, USA\n        highlights: \n          - This is a highlight (bullet point).\n          - This is another highlight.\n      - company: Another ExperienceEntry.\n        position: Your position\n        start_date: 2019-01-01\n        end_date: 2020-01-10\n        location: TX, USA\n        highlights: \n          - This is a highlight (bullet point).\n          - This is another highlight.\n</code></pre> <p>There are seven different entry types in RenderCV. Different types of entries cannot be mixed under the same section, so for each section, you can only use one type of entry.</p> <p>The available entry types are: <code>EducationEntry</code>, <code>ExperienceEntry</code>, <code>PublicationEntry</code>, <code>NormalEntry</code>, <code>OneLineEntry</code>, <code>BulletEntry</code> and <code>TextEntry</code>.</p> <p>Each entry type is a different object (a dictionary). Below, you can find all the entry types along with their optional/mandatory fields and how they appear in each built-in theme.</p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#education-entry","title":"Education Entry","text":"<p>Mandatory Fields:</p> <ul> <li><code>institution</code>: The name of the institution.</li> <li><code>area</code>: The area of study.</li> </ul> <p>Optional Fields:</p> <ul> <li><code>degree</code>: The type of degree.</li> <li><code>location</code>: The location.</li> <li><code>start_date</code>: The start date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format.</li> <li><code>end_date</code>: The end date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format or \"present\".</li> <li><code>date</code>: The date as a custom string or in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format. This will override <code>start_date</code> and <code>end_date</code>.</li> <li><code>highlights</code>: A list of bullet points.</li> </ul> <pre><code>institution: Bo\u011fazi\u00e7i University\nlocation: Istanbul, Turkey\ndegree: BS\narea: Mechanical Engineering\nstart_date: 2015-09\nend_date: 2020-06\nhighlights:\n  - 'GPA: 3.24/4.00 ([Transcript](https://example.com))'\n  - \"Awards: Dean's Honor List, Sportsperson of the Year\"\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#experience-entry","title":"Experience Entry","text":"<p>Mandatory Fields:</p> <ul> <li><code>company</code>: The name of the company.</li> <li><code>position</code>: Your position.</li> </ul> <p>Optional Fields:</p> <ul> <li><code>location</code>: The location.</li> <li><code>start_date</code>: The start date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format.</li> <li><code>end_date</code>: The end date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format or \"present\".</li> <li><code>date</code>: The date as a custom string or in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format. This will override <code>start_date</code> and <code>end_date</code>.</li> <li><code>highlights</code>: A list of bullet points.</li> </ul> <pre><code>company: Some Company\nlocation: TX, USA\nposition: Software Engineer\nstart_date: 2020-07\nend_date: '2021-08-12'\nhighlights:\n  - Developed an [IOS application](https://example.com) that has\n    received more than **100,000 downloads**.\n  - Managed a team of **5** engineers.\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#normal-entry","title":"Normal Entry","text":"<p>Mandatory Fields:</p> <ul> <li><code>name</code>: The name of the entry.</li> </ul> <p>Optional Fields:</p> <ul> <li><code>location</code>: The location.</li> <li><code>start_date</code>: The start date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format.</li> <li><code>end_date</code>: The end date in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format or \"present\".</li> <li><code>date</code>: The date as a custom string or in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format. This will override <code>start_date</code> and <code>end_date</code>.</li> <li><code>highlights</code>: A list of bullet points.</li> </ul> <pre><code>name: Some Project\ndate: 2021-09\nhighlights:\n  - Developed a web application with **React** and **Django**.\n  - Implemented a **RESTful API**\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#publication-entry","title":"Publication Entry","text":"<p>Mandatory Fields:</p> <ul> <li><code>title</code>: The title of the publication.</li> <li><code>authors</code>: The authors of the publication.</li> </ul> <p>Optional Fields:</p> <ul> <li><code>doi</code>: The DOI of the publication.</li> <li><code>journal</code>: The journal of the publication.</li> <li><code>date</code>: The date as a custom string or in <code>YYYY-MM-DD</code>, <code>YYYY-MM</code>, or <code>YYYY</code> format.</li> </ul> <pre><code>title: Magneto-Thermal Thin Shell Approximation for 3D Finite\n  Element Analysis of No-Insulation Coils\nauthors:\n  - J. Doe\n  - '***H. Tom***'\n  - S. Doe\n  - A. Andsurname\ndate: '2021-12-08'\njournal: IEEE Transactions on Applied Superconductivity\ndoi: 10.1109/TASC.2023.3340648\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#one-line-entry","title":"One Line Entry","text":"<pre><code>label: Programming\ndetails: Python, C++, JavaScript, MATLAB\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#bullet-entry","title":"Bullet Entry","text":"<p>Mandatory Fields:</p> <ul> <li><code>bullet</code>: The bullet point.</li> </ul> <pre><code>bullet: This is a bullet entry.\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#text-entry","title":"Text Entry","text":"<p>Mandatory Fields:</p> <ul> <li>The text itself.</li> </ul> <pre><code>This is a *TextEntry*. It is only a text and can be useful for\nsections like **Summary**. To showcase the TextEntry completely,\nthis sentence is added, but it doesn't contain any information.\n...\n</code></pre> <p><code>classic</code> theme: </p> <p><code>moderncv</code> theme: </p> <p><code>sb2nov</code> theme: </p> <p><code>engineeringresumes</code> theme: </p>"},{"location":"user_guide/structure_of_the_yaml_input_file/#design-section-of-the-yaml-input","title":"\"<code>design</code>\" section of the YAML input","text":"<p>The <code>cv</code> part of the input contains your content, and the <code>design</code> part contains your design options. The <code>design</code> part starts with a theme name. Currently, the available themes are: <code>classic</code>, <code>moderncv</code>, <code>sb2nov</code>, <code>engineeringresumes</code>. However, custom themes can also be used (see here.)</p> <pre><code>design:\n  theme: classic\n  ...\n</code></pre> <p>Each theme may have different options for design. <code>classic</code>, <code>sb2nov</code>, and <code>engineeringresumes</code> almost use identical options, but <code>moderncv</code> is slightly different. Please use an IDE that supports JSON schema to avoid missing any available options for the theme (see above).</p> <p>An example <code>design</code> part for a <code>classic</code> theme is shown below:</p> <pre><code>design:\n  theme: classic\n  color: blue\n  disable_external_link_icons: false\n  disable_last_updated_date: false\n  last_updated_date_style: Last updated in TODAY\n  disable_page_numbering: false\n  page_numbering_style: NAME - Page PAGE_NUMBER of TOTAL_PAGES\n  font: Source Sans 3\n  font_size: 10pt\n  header_font_size: \"30 pt\"\n  page_size: a4paper\n  show_timespan_in:\n    - 'Experience'\n  text_alignment: justified\n  margins: \n    page:\n      bottom: 2 cm\n      left: 2 cm\n      right: 2 cm\n      top: 2 cm\n    section_title:\n      bottom: 0.2 cm\n      top: 0.3 cm\n    entry_area:\n      date_and_location_width: 4.5 cm\n      education_degree_width: 1 cm\n      left_and_right: 0.2 cm\n      vertical_between: 0.2 cm\n    highlights_area:\n      left: 0.4 cm\n      top: 0.10 cm\n      vertical_between_bullet_points: 0.10 cm\n    header:\n      bottom: 0.3 cm\n      horizontal_between_connections: 0.5 cm\n      vertical_between_name_and_connections: 0.3 cm\n</code></pre>"},{"location":"user_guide/structure_of_the_yaml_input_file/#locale_catalog-section-of-the-yaml-input","title":"\"<code>locale_catalog</code>\" section of the YAML input","text":"<p>This section is what makes RenderCV a multilingual tool. RenderCV uses some English strings to render PDFs. For example, it takes the dates in ISO format (<code>2020-01-01</code>) and converts them into human-friendly strings (<code>\"Jan. 2020\"</code>). However, you can override these strings for your own language or needs with the <code>locale_catalog</code> section.</p> <p>Here is an example:</p> <pre><code>locale_catalog:\n  abbreviations_for_months: # translation of the month abbreviations\n    - Jan\n    - Feb\n    - Mar\n    - Apr\n    - May\n    - Jun\n    - Jul\n    - Aug\n    - Sep\n    - Oct\n    - Nov\n    - Dec\n  month: month      # translation of the word \"month\"\n  months: months    # translation of the word \"months\"\n  year: year        # translation of the word \"year\"\n  years: years      # translation of the word \"years\"\n  present: present  # translation of the word \"present\"\n  to: to            # translation of the word \"to\"\n</code></pre>"}]}